<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on blog.flowstate.io </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.flowstate.io/categories/javascript/index.xml</link>
    <language>en-us</language>
    <author>Oakley Hall</author>
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>React Native</title>
      <link>http://blog.flowstate.io/post/react-native/</link>
      <pubDate>Wed, 26 Jul 2017 13:51:06 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/react-native/</guid>
      <description>&lt;p&gt;At GRT, we recently built a React web client for a small educational startup.  Once this web app was feature complete, we decided to do a do a port to React Native as a learning experience and proof of concept.  We definitely learned some stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is React Native?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt; is a set of tools that lets you build &lt;em&gt;Native&lt;/em&gt; Android and iOS apps using JavaScript and React. This is not a webapp run in some webview in a native wrapper.  The React Native code compiles down to a native executable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why would you want to do this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So you can write a cross platform app that has the snappy, responsive feel of a native app without having to dive into actual native implementation.  Basically you want to write native apps in Javascript.&lt;/p&gt;

&lt;p&gt;Ok, so let&amp;rsquo;s say you have a React web app like we did, and you want to try porting it to React Native.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First of all, go back in time and write the React Native implementation first.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just kidding&amp;hellip; sort of.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the thing.  React for the web is much more forgiving and flexible than React Native.  React Native does not used HTML or CSS, so if you wrote CSS and have a bunch of HTML in your webapp, you&amp;rsquo;re going to be spending some time rewriting.  However React for the web support styling using JS objects, so the port in the other direction is easy. Also let&amp;rsquo;s say you&amp;rsquo;re using a bunch of 3rd party UI modules in your app.  If you have this all figured out for React Native, you&amp;rsquo;re going to have a pretty easy time finding modules with comperable APIs for the web.  The reverse is not likely to be the case right now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Abstract even MORE logic that you think.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So part of the idea of porting your app to React Native is so you can share code right?  If your code is in a view, you&amp;rsquo;re not sharing it.  Look how much logic you have in your &lt;code&gt;.jsx&lt;/code&gt; files.  A ton, right?  All that has to be pulled out into modules if you want to maintain it in one place.  Think about this ahead of time.  If you&amp;rsquo;re using Redux, you can think about this in terms of &lt;a href=&#34;http://redux.js.org/docs/basics/UsageWithReact.html#presentational-and-container-components&#34;&gt;Component and a Containter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you even need a native app?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One more thing we discovered is that the percieved perfomance on mobile of our React Native app was not superior enough to the web app to justify maintaining them both.  Depending on the level of interactivity in your UI a web app may offer suitable performance and user experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what should you do?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React Native is a great solution for writing cross platform mobile apps in Javascript, but there are meaningful enough differences from React that you&amp;rsquo;ll want to plan carefully if you&amp;rsquo;re planning on sharing code.  Maintaining multiple codebases always comes at a cost, so do some experiments and consider how much you have to gain from a native app before committing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use NVM</title>
      <link>http://blog.flowstate.io/post/nvm/</link>
      <pubDate>Thu, 01 Oct 2015 17:23:41 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/nvm/</guid>
      <description>&lt;p&gt;NVM is the Node Version Manager, a bash script you can and should use to manage multiple NodeJS versions.  As a Node developer, you&amp;rsquo;ll invariably find yourself dealing with Node version compatibility issues forcing you to switch versions of Node depending on what you&amp;rsquo;re working on.  It would be nice if Node offered a command like &lt;code&gt;use 4.1.1&lt;/code&gt;, well NVM does just that.&lt;/p&gt;

&lt;p&gt;First install the latest version from &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/&amp;lt;LATEST_VERSION/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install the &lt;code&gt;.nvm&lt;/code&gt; file in your user dir and add some lines to your &lt;code&gt;.bashrc&lt;/code&gt; to source it. If you&amp;rsquo;re seeing some error like &lt;code&gt;-bash: nvm: command not found&lt;/code&gt; when you try to run the app, chances are you&amp;rsquo;re not sourcing it correctly.&lt;/p&gt;

&lt;p&gt;Before we start, let&amp;rsquo;s look at what version of Node we&amp;rsquo;re running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node --version
v0.10.22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yikes! Time for an upgrade. What does NVM have available for us?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list

-&amp;gt;       system
node -&amp;gt; stable (-&amp;gt; N/A) (default)
iojs -&amp;gt; N/A (default)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, well, we haven&amp;rsquo;t installed any new versions yet, so all we have available is &lt;code&gt;system&lt;/code&gt; which is what we started with.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get a freshie.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm install 4.1.1
######################################################################## 100.0%
WARNING: checksums are currently disabled for node.js v4.0 and later
Now using node v4.1.1 (npm v2.14.4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, I&amp;rsquo;ll Google that warning later, but we have a new version of Node available, but we&amp;rsquo;re not using it yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list
         v4.1.1
-&amp;gt;       system
node -&amp;gt; stable (-&amp;gt; v4.1.1) (default)
stable -&amp;gt; 4.1 (-&amp;gt; v4.1.1) (default)
iojs -&amp;gt; N/A (default)

$ node --version
v0.10.22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok so let&amp;rsquo;s use our new version now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm use 4.1.1
Now using node v4.1.1 (npm v2.14.4)

$ node --version
v4.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That easy. Now you can toggle back and forth between Node versions with nary a hassle. Go do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NPM Shrinkwrap is easy</title>
      <link>http://blog.flowstate.io/post/shrinkwrap/</link>
      <pubDate>Fri, 18 Sep 2015 12:52:45 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/shrinkwrap/</guid>
      <description>

&lt;p&gt;In this hypothetical example, you&amp;rsquo;re a programmer who has a project. In this project, you are using a bunch of dependencies, which you manage with NPM and are specified in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Whenever you build this app, you install all the things using &lt;code&gt;npm install&lt;/code&gt;.  You continue to build the app and deploy it and your users use it.&lt;/p&gt;

&lt;p&gt;Except one day you build the app and it breaks! WHY?! You haven&amp;rsquo;t even touched the code!&lt;/p&gt;

&lt;p&gt;Aha! A dependency has changed, or a dependency of a dependency and now our build is broken.&lt;/p&gt;

&lt;p&gt;So you&amp;rsquo;re telling me that unless every package uses specific package version, my build could break at ANY time?&lt;/p&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;There must be a way to fix this.&lt;/p&gt;

&lt;p&gt;There is!&lt;/p&gt;

&lt;h2 id=&#34;npm-shrinkwrap&#34;&gt;NPM Shrinkwrap&lt;/h2&gt;

&lt;p&gt;NPM Shrinkwrap locks your entire dependency tree to the current installed version.  This is built into NPM and you can do it right now.&lt;/p&gt;

&lt;p&gt;This command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm shrinkwrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will generate a file called &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; that specified EXACTLY which version of each dependency will be installed when you call &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to update a package, run &lt;code&gt;npm update &amp;lt;package_name&amp;gt;&lt;/code&gt;. and then re-run &lt;code&gt;npm shrinkwrap&lt;/code&gt; to update your &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;if you want to see which packages are out of date, you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm outdated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you&amp;rsquo;ll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package        Current  Wanted  Latest  Location
lodash           3.7.0  3.10.1  3.10.1  lodash
moment          2.10.2  2.10.6  2.10.6  moment
q                1.3.0   1.4.1   1.4.1  q
wreck            5.5.1   5.6.1   6.2.0  wreck
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, shrinkwrap ignores your devDependencies you can include them by using the &lt;code&gt;--dev&lt;/code&gt; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm shrinkwrap --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how easy that is! So don&amp;rsquo;t live with broken builds, use NPM shrinkwrap and keep your dependecies where they belong.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack Loaders</title>
      <link>http://blog.flowstate.io/post/webpack_loaders/</link>
      <pubDate>Thu, 20 Aug 2015 09:00:59 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/webpack_loaders/</guid>
      <description>

&lt;p&gt;Start with the &lt;a href=&#34;http://blog.flowstate.io/post/webpack&#34;&gt;webpack basics&lt;a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-loader&#34;&gt;What is a loader?&lt;/h2&gt;

&lt;p&gt;A loader is &lt;a href=&#34;http://webpack.github.io/docs/loaders.html&#34;&gt;basically a preprocessor&lt;/a&gt;. It&amp;rsquo;s how you let webpack know that you&amp;rsquo;d like to transform a module in some specified way. For example, let&amp;rsquo;s say you are writing your code in &lt;a href=&#34;https://hacks.mozilla.org/category/es6-in-depth/&#34;&gt;ES6&lt;/a&gt; and you&amp;rsquo;d like webpack to process that into ES5 so the browser can parse it.  You&amp;rsquo;d define a loader for &lt;a href=&#34;https://babeljs.io/&#34;&gt;babel&lt;/a&gt; that looks for &lt;code&gt;.js&lt;/code&gt; files being required and then runs them through babel before adding them to the &lt;a href=&#34;https://github.com/webpack/webpack/tree/master/examples/commonjs#jsoutputjs&#34;&gt;bundle&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;example-please&#34;&gt;Example, please&lt;/h2&gt;

&lt;p&gt;You can check out the working example here &lt;a href=&#34;https://github.com/ohall/webpack-loaders-example&#34;&gt;repo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here is our &lt;code&gt;index.js&lt;/code&gt; with some cutting edge ECMAScript6 code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// look at this cool ES6 syntax!
import sweet from &#39;./sweet&#39;;

sweet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let&amp;rsquo;s run &lt;code&gt;webpack&lt;/code&gt; and get our bundle on.&lt;/p&gt;

&lt;p&gt;Oh no! Gruesome error!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ERROR in ./index.js
Module parse failed: /Users/ohall/Documents/projects/webpack-loaders-example/index.js Line 2: Unexpected reserved word
You may need an appropriate loader to handle this file type.
| // look at this cool ES6 syntax!
| import sweet from &#39;./sweet&#39;;
| 
| sweet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to fix this by defining a loader in order to preprocess our ES6 stuff into palatable ES5.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s update our &lt;code&gt;webpack.config.js&lt;/code&gt; like so.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {
  entry: &amp;quot;./index.js&amp;quot;,
  output: {
    path: __dirname,
    filename: &amp;quot;bundle.js&amp;quot;
  },
  module: {
    loaders: [
      { test: /\.js$/, exclude: /node_modules/, loader: &#39;babel&#39;}
    ]
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let&amp;rsquo;s run &lt;code&gt;webpack&lt;/code&gt; AGAIN!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SCORE!&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Hash: 3e3bbd08bc6f0ce8543b
Version: webpack 1.11.0
Time: 430ms
    Asset     Size  Chunks             Chunk Names
bundle.js  1.96 kB       0  [emitted]  main
    + 2 hidden modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our &lt;code&gt;bundle.js&lt;/code&gt; is complete and looking right.&lt;/p&gt;

&lt;h2 id=&#34;ok-so-what-just-happened&#34;&gt;Ok, so what just happened?&lt;/h2&gt;

&lt;p&gt;I added a &lt;code&gt;module&lt;/code&gt; to our &lt;code&gt;webpack.config.js&lt;/code&gt; with a &lt;code&gt;loaders&lt;/code&gt; array.  Inside that array, I defined a babel loader.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  module: {
    loaders: [
      { test: /\.js$/, exclude: /node_modules/, loader: &#39;babel&#39;}
    ]
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;What the loader does is:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply the test.  In this case, looking for files that end in &lt;code&gt;.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Exclude and files in the &lt;code&gt;node_modules&lt;/code&gt; dir, bc that&amp;rsquo;s not our concern.&lt;/li&gt;
&lt;li&gt;Run the files that match our test through the loader we&amp;rsquo;ve specified, in this case, babel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what we have is our ES6 source being parsed by babel &lt;strong&gt;before&lt;/strong&gt; being added to our &lt;code&gt;bundle.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Simple, right?&lt;/p&gt;

&lt;h2 id=&#34;what-else-can-i-use-loaders-for&#34;&gt;What else can I use loaders for.&lt;/h2&gt;

&lt;p&gt;You can process anything.  Common use cases include &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, static assets like images, dialects like CoffeeScript and Typescript.  The webpack wiki contains a &lt;a href=&#34;https://github.com/webpack/docs/wiki/list-of-loaders&#34;&gt;list of available loaders&lt;/a&gt; or you can &lt;a href=&#34;http://webpack.github.io/docs/loaders.html#writing-a-loader&#34;&gt;roll your own&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stop trying to learn a programming language</title>
      <link>http://blog.flowstate.io/post/so_you_wanna_dev%20copy/</link>
      <pubDate>Mon, 17 Aug 2015 06:03:19 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/so_you_wanna_dev%20copy/</guid>
      <description>

&lt;p&gt;I hear this question all the time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Which programming language should I learn?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My answer is always the same:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;It doesn&#39;t matter. Let the project decide for you.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-story&#34;&gt;A story&lt;/h4&gt;

&lt;p&gt;When I first started my journey as a professional software developer, I got hired to work on an application written in a dying language on a platform that would soon be reviled the world over. This project was written in ActionScript 3, using the Flex framework. This was cutting edge stuff at the time, with a bright future, before Steve Jobs and 0 day exploits crapped in the Flash punch bowl.&lt;/p&gt;

&lt;p&gt;The point is, I started learning my trade using a language that I&amp;rsquo;d probably never see again, &lt;strong&gt;but that never mattered&lt;/strong&gt;. What mattered is that I worked with a brilliant team who took time to train me in the craft of programming. I learned the fundamentals of software development and I learned the tools I have used every day since I started that project.&lt;/p&gt;

&lt;p&gt;An aspiring programmer fretting about what language to develop in is like a carpenter worrying about what wood to use. It&amp;rsquo;s one of many choices to be made about a project, but it does not define the carpenter&amp;rsquo;s expertise.&lt;/p&gt;

&lt;p&gt;What matters is not the material you work in, but the tools, the craft, and the mindset you develop.&lt;/p&gt;

&lt;h2 id=&#34;the-tools&#34;&gt;The tools&lt;/h2&gt;

&lt;h3 id=&#34;version-control&#34;&gt;Version control&lt;/h3&gt;

&lt;p&gt;Understand &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&#34;&gt;version control&lt;/a&gt;. &lt;a href=&#34;https://git-scm.com/about&#34;&gt;Git&lt;/a&gt; is the most popular at the moment and seems to have a firm hold on the space. Use &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell&#34;&gt;Branch&lt;/a&gt;, &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tag&lt;/a&gt;, do &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;pull requests&lt;/a&gt;, even if they are just against your own code. You can version control any file. Use git for papers, blog posts, any document that you&amp;rsquo;ll want to have a record of changes to.&lt;/p&gt;

&lt;h3 id=&#34;text-editor&#34;&gt;Text editor&lt;/h3&gt;

&lt;p&gt;Pick something and become a power user. I personally feel most at home in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34;&gt;IDE&lt;/a&gt;, so I spend most of my time writing JavaScript in &lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34;&gt;Webstorm&lt;/a&gt;, but I also love the light weight editor &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;. I&amp;rsquo;ve created a ton custom templates that autocomplete common code snippets. I know many keyboard shortcuts and tricks to simplify and expedite my workflow. It&amp;rsquo;s the equivalent of sitting in the driver&amp;rsquo;s seat of a car and adjusting the mirrors and familiarizing yourself with the controls. I try to learn a little something new every day. Some devs recommend working without a mouse one day a week. I haven&amp;rsquo;t had the nerve for that one yet.&lt;/p&gt;

&lt;h3 id=&#34;the-terminal&#34;&gt;The terminal&lt;/h3&gt;

&lt;p&gt;This is among the most important skills you&amp;rsquo;ll need as a developer. This will come up over and over and over. Get comfortable navigating the file system in the terminal (&lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;), running applications, viewing and changing permissions(&lt;code&gt;chmod&lt;/code&gt;), piping data from one app to another (&lt;code&gt;|&lt;/code&gt;). Searching for text strings in a file or directory (&lt;code&gt;grep&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev1.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Eventually, you&amp;rsquo;ll need tools like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;scp&lt;/code&gt; and the whole panoply of command line utilities available on the Unix platform. I&amp;rsquo;m told Windows has stuff like that too.&lt;/p&gt;

&lt;h2 id=&#34;the-platform&#34;&gt;The platform&lt;/h2&gt;

&lt;p&gt;Where is your code going to execute?  How will your users interact with it. For me, right now, that&amp;rsquo;s in the browser and &lt;a href=&#34;https://en.wikipedia.org/wiki/V8_(JavaScript_engine)&#34;&gt;Node&amp;rsquo;s V8 engine&lt;/a&gt;. Well, &lt;a href=&#34;http://googleblog.blogspot.com/2009/10/what-is-browser.html&#34;&gt;what is a browser&lt;/a&gt;? &lt;a href=&#34;http://www.slashroot.in/httphypertext-transfer-protocol-request-and-response&#34;&gt;How does HTTP work&lt;/a&gt;? What &lt;a href=&#34;https://developer.chrome.com/devtools&#34;&gt;tools&lt;/a&gt; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Tools&#34;&gt;are&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/safari/tools/&#34;&gt;avaialble&lt;/a&gt; to &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dd565628(v=vs.85).aspx&#34;&gt;developers&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev2.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;This is your world. These are the rules that will define what you can do and the platform on which you&amp;rsquo;ll be doing it. This is your users whole experience. Before you learn anything about a language, you have to understand the environment in which it will execute.&lt;/p&gt;

&lt;h2 id=&#34;the-craft&#34;&gt;The craft&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://amzn.to/1hozy0j&#34;&gt;Buy this book&lt;/a&gt; and read it more than once.&lt;/p&gt;

&lt;p&gt;Your early code is going to suck. In fact most of your code is going to suck, as will most of the code you will ever read. Nevertheless, you will persevere in the eternal struggle against entropy. You will endeavor to make your code readable and performant and something you are proud to show to others. Embrace simplicity, modularity, decoupling, testing, automation, documentation and all the other &lt;a href=&#34;https://pragprog.com/the-pragmatic-programmer/extracts/tips&#34;&gt;hallmarks of a software craftsman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev3.png&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-mindset&#34;&gt;The mindset&lt;/h2&gt;

&lt;h3 id=&#34;check-your-ego-at-the-door&#34;&gt;Check your ego at the door.&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re going to hear criticism of your bad code, don&amp;rsquo;t shy away from that. Embrace it, learn from it, write it down. Endeavor not to make the same mistake twice. Do not hide your code, seek review and criticism. This is how you will grow. Seek out more senior programmers and read their code. Show gratitude when they take the time to tell you what to fix in yours.&lt;/p&gt;

&lt;h3 id=&#34;make-stuff-constantly&#34;&gt;Make stuff constantly&lt;/h3&gt;

&lt;p&gt;Some people can read book to learn how to do things. Not me. I can only learn by doing things badly and then researching, reading and iterating over it. Hence, I must constantly be working on side project to learn how to do anything. &lt;strong&gt;Think of something you want to make and then figure out how to do it one small piece at a time.&lt;/strong&gt; &amp;lt;&amp;ndash; This is the secret formula for becoming a software developer.&lt;/p&gt;

&lt;h3 id=&#34;read-read-and-listen&#34;&gt;Read, read and listen&lt;/h3&gt;

&lt;p&gt;Read &lt;a href=&#34;http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read&#34;&gt;books&lt;/a&gt;, read &lt;a href=&#34;http://blog.codinghorror.com/&#34;&gt;blogs&lt;/a&gt;, read &lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;hacker news&lt;/a&gt;, read &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; read &lt;a href=&#34;https://github.com/joyent/node/blob/master/lib/_http_server.js&#34;&gt;code&lt;/a&gt;, listen to &lt;a href=&#34;https://devchat.tv/js-jabber/&#34;&gt;podcasts&lt;/a&gt;. Perhaps the 300th explanation of a concept will be the one that sinks in.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There is so much to do! Why are you fussing about which language to learn? Focus on what you want to create. Become a technologist and a craftsman. Make things! Start right now! You&amp;rsquo;ll learn language syntax as you go, but it will be incidental to learning how to create software holistically and how to make cool things that people will want to use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stop trying to learn a programming language</title>
      <link>http://blog.flowstate.io/post/so_you_wanna_dev/</link>
      <pubDate>Mon, 17 Aug 2015 06:03:19 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/so_you_wanna_dev/</guid>
      <description>

&lt;p&gt;I hear this question all the time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Which programming language should I learn?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My answer is always the same:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;It doesn&#39;t matter. Let the project decide for you.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-story&#34;&gt;A story&lt;/h4&gt;

&lt;p&gt;When I first started my journey as a professional software developer, I got hired to work on an application written in a dying language on a platform that would soon be reviled the world over. This project was written in ActionScript 3, using the Flex framework. This was cutting edge stuff at the time, with a bright future, before Steve Jobs and 0 day exploits crapped in the Flash punch bowl.&lt;/p&gt;

&lt;p&gt;The point is, I started learning my trade using a language that I&amp;rsquo;d probably never see again, &lt;strong&gt;but that never mattered&lt;/strong&gt;. What mattered is that I worked with a brilliant team who took time to train me in the craft of programming. I learned the fundamentals of software development and I learned the tools I have used every day since I started that project.&lt;/p&gt;

&lt;p&gt;An aspiring programmer fretting about what language to develop in is like a carpenter worrying about what wood to use. It&amp;rsquo;s one of many choices to be made about a project, but it does not define the carpenter&amp;rsquo;s expertise.&lt;/p&gt;

&lt;p&gt;What matters is not the material you work in, but the tools, the craft, and the mindset you develop.&lt;/p&gt;

&lt;h2 id=&#34;the-tools&#34;&gt;The tools&lt;/h2&gt;

&lt;h3 id=&#34;version-control&#34;&gt;Version control&lt;/h3&gt;

&lt;p&gt;Understand &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&#34;&gt;version control&lt;/a&gt;. &lt;a href=&#34;https://git-scm.com/about&#34;&gt;Git&lt;/a&gt; is the most popular at the moment and seems to have a firm hold on the space. Use &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell&#34;&gt;Branch&lt;/a&gt;, &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tag&lt;/a&gt;, do &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;pull requests&lt;/a&gt;, even if they are just against your own code. You can version control any file. Use git for papers, blog posts, any document that you&amp;rsquo;ll want to have a record of changes to.&lt;/p&gt;

&lt;h3 id=&#34;text-editor&#34;&gt;Text editor&lt;/h3&gt;

&lt;p&gt;Pick something and become a power user. I personally feel most at home in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34;&gt;IDE&lt;/a&gt;, so I spend most of my time writing JavaScript in &lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34;&gt;Webstorm&lt;/a&gt;, but I also love the light weight editor &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;. I&amp;rsquo;ve created a ton custom templates that autocomplete common code snippets. I know many keyboard shortcuts and tricks to simplify and expedite my workflow. It&amp;rsquo;s the equivalent of sitting in the driver&amp;rsquo;s seat of a car and adjusting the mirrors and familiarizing yourself with the controls. I try to learn a little something new every day. Some devs recommend working without a mouse one day a week. I haven&amp;rsquo;t had the nerve for that one yet.&lt;/p&gt;

&lt;h3 id=&#34;the-terminal&#34;&gt;The terminal&lt;/h3&gt;

&lt;p&gt;This is among the most important skills you&amp;rsquo;ll need as a developer. This will come up over and over and over. Get comfortable navigating the file system in the terminal (&lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;), running applications, viewing and changing permissions(&lt;code&gt;chmod&lt;/code&gt;), piping data from one app to another (&lt;code&gt;|&lt;/code&gt;). Searching for text strings in a file or directory (&lt;code&gt;grep&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev1.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Eventually, you&amp;rsquo;ll need tools like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;scp&lt;/code&gt; and the whole panoply of command line utilities available on the Unix platform. I&amp;rsquo;m told Windows has stuff like that too.&lt;/p&gt;

&lt;h2 id=&#34;the-platform&#34;&gt;The platform&lt;/h2&gt;

&lt;p&gt;Where is your code going to execute?  How will your users interact with it. For me, right now, that&amp;rsquo;s in the browser and &lt;a href=&#34;https://en.wikipedia.org/wiki/V8_(JavaScript_engine)&#34;&gt;Node&amp;rsquo;s V8 engine&lt;/a&gt;. Well, &lt;a href=&#34;http://googleblog.blogspot.com/2009/10/what-is-browser.html&#34;&gt;what is a browser&lt;/a&gt;? &lt;a href=&#34;http://www.slashroot.in/httphypertext-transfer-protocol-request-and-response&#34;&gt;How does HTTP work&lt;/a&gt;? What &lt;a href=&#34;https://developer.chrome.com/devtools&#34;&gt;tools&lt;/a&gt; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Tools&#34;&gt;are&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/safari/tools/&#34;&gt;available&lt;/a&gt; to &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dd565628&#34;&gt;developers&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev2.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;This is your world. These are the rules that will define what you can do and the platform on which you&amp;rsquo;ll be doing it. This is your users whole experience. Before you learn anything about a language, you have to understand the environment in which it will execute.&lt;/p&gt;

&lt;h2 id=&#34;the-craft&#34;&gt;The craft&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://amzn.to/1hozy0j&#34;&gt;Buy this book&lt;/a&gt; and read it more than once.&lt;/p&gt;

&lt;p&gt;Your early code is going to suck. In fact most of your code is going to suck, as will most of the code you will ever read. Nevertheless, you will persevere in the eternal struggle against entropy. You will endeavor to make your code readable and performant and something you are proud to show to others. Embrace simplicity, modularity, decoupling, testing, automation, documentation and all the other &lt;a href=&#34;https://pragprog.com/the-pragmatic-programmer/extracts/tips&#34;&gt;hallmarks of a software craftsman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev3.png&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-mindset&#34;&gt;The mindset&lt;/h2&gt;

&lt;h3 id=&#34;check-your-ego-at-the-door&#34;&gt;Check your ego at the door.&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re going to hear criticism of your bad code, don&amp;rsquo;t shy away from that. Embrace it, learn from it, write it down. Endeavor not to make the same mistake twice. Do not hide your code, seek review and criticism. This is how you will grow. Seek out more senior programmers and read their code. Show gratitude when they take the time to tell you what to fix in yours.&lt;/p&gt;

&lt;h3 id=&#34;make-stuff-constantly&#34;&gt;Make stuff constantly&lt;/h3&gt;

&lt;p&gt;Some people can read book to learn how to do things. Not me. I can only learn by doing things badly and then researching, reading and iterating over it. Hence, I must constantly be working on side project to learn how to do anything. &lt;strong&gt;Think of something you want to make and then figure out how to do it one small piece at a time.&lt;/strong&gt; &amp;lt;&amp;ndash; This is the secret formula for becoming a software developer.&lt;/p&gt;

&lt;h3 id=&#34;read-read-and-listen&#34;&gt;Read, read and listen&lt;/h3&gt;

&lt;p&gt;Read &lt;a href=&#34;http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read&#34;&gt;books&lt;/a&gt;, read &lt;a href=&#34;http://blog.codinghorror.com/&#34;&gt;blogs&lt;/a&gt;, read &lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;hacker news&lt;/a&gt;, read &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; read &lt;a href=&#34;https://github.com/joyent/node/blob/master/lib/_http_server.js&#34;&gt;code&lt;/a&gt;, listen to &lt;a href=&#34;https://devchat.tv/js-jabber/&#34;&gt;podcasts&lt;/a&gt;. Perhaps the 300th explanation of a concept will be the one that sinks in.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There is so much to do! Why are you fussing about which language to learn? Focus on what you want to create. Become a technologist and a craftsman. Make things! Start right now! You&amp;rsquo;ll learn language syntax as you go, but it will be incidental to learning how to create software holistically and how to make cool things that people will want to use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack: Rage to sage</title>
      <link>http://blog.flowstate.io/post/webpack/</link>
      <pubDate>Fri, 14 Aug 2015 20:25:50 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/webpack/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;re like me, your first encounter with Webpack was probably hostile. You&amp;rsquo;re trying to learn some new technology like React, launching a demo project to see how it works and something is broken. You examine the build scripts and suddenly you&amp;rsquo;re confronted with this arcane looking &lt;code&gt;webpack.config.js&lt;/code&gt; file. You cruise over to the documentation for Webpack. It has many pages, none of them marked &lt;em&gt;TL;DR&lt;/em&gt;. You hate reading documentation! This is not even what you were trying to do! You&amp;rsquo;re yak shaving again! Curse you JS tooling cambrian explosion! Gahh!!&lt;/p&gt;

&lt;p&gt;Exhale. Webpack is not that complicated, especially for simple work flows. It&amp;rsquo;s becoming an integral part of the JS ecosystem and so it&amp;rsquo;s worth sitting down and learning it. You can do this, just focus.&lt;/p&gt;

&lt;h3 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Webpack is a module bundler like Browserify, but with better support for Node and React.&lt;/li&gt;
&lt;li&gt;Webpack is not that hard.&lt;/li&gt;
&lt;li&gt;Here&amp;rsquo;s a simple example: &lt;a href=&#34;https://github.com/ohall/webpack-example&#34;&gt;https://github.com/ohall/webpack-example&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-is-the-point-of-webpack&#34;&gt;What is the point of Webpack?&lt;/h3&gt;

&lt;p&gt;Webpack is a module bundler. You may be familiar with &lt;code&gt;Browserify&lt;/code&gt; which allows you to use the AMD (Asynchronous Module Definition) syntax (&lt;code&gt;var foo = require(&#39;bar&#39;);&lt;/code&gt;) in your frontend code, much the same and you would in your Node applications. Basically this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// awesome is exported in another file
var wicked = require(&#39;awesome&#39;);
wicked();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These tools basically suck in all the JS files required by your app and concatenate them into one JS file that you can add to your app. This is WAY better that managing a bunch of script tags in your &lt;code&gt;index.html&lt;/code&gt; or wherever. You can configure &lt;a href=&#34;http://webpack.github.io/docs/loaders.html&#34;&gt;loaders&lt;/a&gt; to do the same thing with other static files, like css and images.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://webpack.github.io/assets/what-is-webpack.png&#34; alt=&#34;webpack&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;but-why-webpack-doesn-t-browserify-do-this-more-simply&#34;&gt;But why Webpack? Doesn&amp;rsquo;t Browserify do this more simply?&lt;/h3&gt;

&lt;p&gt;There are &lt;a href=&#34;http://mattdesl.svbtle.com/browserify-vs-webpack&#34;&gt;compelling&lt;/a&gt; &lt;a href=&#34;http://blog.namangoel.com/browserify-vs-webpack-js-drama&#34;&gt;arguments&lt;/a&gt; for both &lt;a href=&#34;https://www.reddit.com/r/reactjs/comments/30at04/webpack_vs_browserify_whats_best_for_react/&#34;&gt;technologies&lt;/a&gt;. One big arguement for Webpack is the ability to do &lt;a href=&#34;https://gaearon.github.io/react-hot-loader/&#34;&gt;React Hot-loading&lt;/a&gt; easily, speeding up dev time. But this post isn&amp;rsquo;t about choosing between the two. For whatever reason, you&amp;rsquo;re using Webpack now, DEAL WITH IT.&lt;/p&gt;

&lt;h3 id=&#34;i-m-looking-at-webpack-config-js-and-i-m-angry&#34;&gt;I&amp;rsquo;m looking at webpack.config.js and I&amp;rsquo;m angry.&lt;/h3&gt;

&lt;p&gt;Whoa. It&amp;rsquo;s cool. Look, let&amp;rsquo;s start with a very simple example, so we can improve the signal to noise ratio. You can find a repo with this example here: &lt;a href=&#34;https://github.com/ohall/webpack-example&#34;&gt;https://github.com/ohall/webpack-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you have an &lt;code&gt;index.js&lt;/code&gt; file;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// index.js
var sweet = require(&#39;./sweet&#39;);
sweet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That requires a sweet module &lt;code&gt;sweet.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// sweet.js
module.exports = function () {
  window.onload = function () {
    var t = document.createTextNode(&#39;You did it! Sweet!&#39;);
    document.body.appendChild(t);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can set up our super simple &lt;code&gt;webpack.config.js&lt;/code&gt; file will export a module with &lt;code&gt;index.js&lt;/code&gt; as our entry file and output a file called &lt;code&gt;bundle.js&lt;/code&gt;. Webpack figures out the rest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {
    entry: &amp;quot;./index.js&amp;quot;,
    output: {
        path: __dirname,
        filename: &amp;quot;bundle.js&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: &lt;code&gt;__dirname&lt;/code&gt; is a &lt;a href=&#34;https://nodejs.org/docs/latest/api/globals.html#globals_dirname&#34;&gt;reference in Node for the currently executing directory.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve installed Webpack globally,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install webpack -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can run &lt;code&gt;webpack&lt;/code&gt; and create a &lt;code&gt;bundle.js&lt;/code&gt; file that includes all the modules we need and use it in your HTML. &lt;a href=&#34;https://github.com/ohall/webpack-example&#34;&gt;Run the example&lt;/a&gt; to see what the bundle looks like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--index.html--&amp;gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There is SO much more to Webpack, that I&amp;rsquo;ll dive into in the next post. For now though, you have enough to get you a footing in Webpack and start experimenting. JS tooling can be frustrating, especially when it feels like you have to learn a whole new build system every week. Don&amp;rsquo;t despair! Start simple, take time to learn it and try to have fun.&lt;/p&gt;

&lt;p&gt;Next up: &lt;a href=&#34;http://blog.flowstate.io/post/webpack_loaders&#34;&gt;webpack loaders&lt;a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Destroying BackboneJS Views</title>
      <link>http://blog.flowstate.io/post/destroy_bb_views/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 UTC</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/destroy_bb_views/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve spent much time using Backbone views, you&amp;rsquo;ve invariable encountered the situation where you want to get rid of a view, but some part of it keeps hanging around. Be it DOM elements or event listeners.  Your new view might be being appended to the old one, or you&amp;rsquo;re seeing duplicated events. What you really need is to destroy that old view once and for all.&lt;/p&gt;

&lt;p&gt;The easiest way to do this is by adding some kind of destroy() function to your view.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I do it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  Backbone.View.extend({
      //some other view stuff here...
      destroy: function () {
          this.undelegateEvents();
          this.$el.removeData().unbind();
          
          this.remove();
          //OR
          this.$el.empty();
      }
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s break this down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt; we want to make sure we&amp;rsquo;re removing all delegated events (the ones in the &lt;code&gt;events:{&amp;quot;event selector&amp;quot;: &amp;quot;callback&amp;quot;}&lt;/code&gt; hash). We do this so we can avoid memory leaks and not have mystery bindings that will fire unexpectedly later on. &lt;code&gt;undelegateEvents()&lt;/code&gt; is a Backbone.View prototype function that removes the view&amp;rsquo;s delegated events. Simple.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt; we want to cleanup any data in the view object that is hanging around and unbind any events that we bound outside the events hash. jQuery provides a removeData() function that allows us to to do that.&lt;/p&gt;

&lt;p&gt;You may also have bound event listeners to your view chain &lt;code&gt;unbind()&lt;/code&gt; with no arguments to remove all previously-attached event handlers from your $el.
&lt;code&gt;this.$el.removeData().unbind();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you may want to do one of two things here.&lt;/strong&gt; You may want to remove your view element completely OR you just want to remove any child elements you&amp;rsquo;ve appended to it during it&amp;rsquo;s life. The latter would be appropriate if, for example, you&amp;rsquo;ve set the $el of your view to be some DOM element that should remain after your view behavior is complete&lt;/p&gt;

&lt;p&gt;In the former case, &lt;code&gt;this.remove()&lt;/code&gt; will obliterate your view element and it&amp;rsquo;s children from the DOM.&lt;/p&gt;

&lt;p&gt;In the later case, &lt;code&gt;this.$el.empty()&lt;/code&gt; will remove all child elements.&lt;/p&gt;

&lt;p&gt;As you can see, it&amp;rsquo;s not especially difficult to clean up your view, but you do have to do it.  As with many things in the unopinionated world of BackboneJS you have to roll your own solution.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&#34;http://jsfiddle.net/oakley349/caqLx10x/&#34;&gt;this fiddle&lt;/a&gt; if you want to fool around with my solution.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;//jsfiddle.net/oakley349/caqLx10x/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt; 
</description>
    </item>
    
  </channel>
</rss>
