<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Node on blog.flowstate.io </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.flowstate.io/categories/node/</link>
    <language>en-us</language>
    <author>Oakley Hall</author>
    
    <updated>Thu, 01 Oct 2015 17:23:41 EDT</updated>
    
    <item>
      <title>Use NVM</title>
      <link>http://blog.flowstate.io/post/nvm/</link>
      <pubDate>Thu, 01 Oct 2015 17:23:41 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/nvm/</guid>
      <description>&lt;p&gt;NVM is the Node Version Manager, a bash script you can and should use to manage multiple NodeJS versions.  As a Node developer, you&amp;rsquo;ll invariably find yourself dealing with Node version compatibility issues forcing you to switch versions of Node depending on what you&amp;rsquo;re working on.  It would be nice if Node offered a command like &lt;code&gt;use 4.1.1&lt;/code&gt;, well NVM does just that.&lt;/p&gt;

&lt;p&gt;First install the latest version from &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/&amp;lt;LATEST_VERSION/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install the &lt;code&gt;.nvm&lt;/code&gt; file in your user dir and add some lines to your &lt;code&gt;.bashrc&lt;/code&gt; to source it. If you&amp;rsquo;re seeing some error like &lt;code&gt;-bash: nvm: command not found&lt;/code&gt; when you try to run the app, chances are you&amp;rsquo;re not sourcing it correctly.&lt;/p&gt;

&lt;p&gt;Before we start, let&amp;rsquo;s look at what version of Node we&amp;rsquo;re running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node --version
v0.10.22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yikes! Time for an upgrade. What does NVM have available for us?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list

-&amp;gt;       system
node -&amp;gt; stable (-&amp;gt; N/A) (default)
iojs -&amp;gt; N/A (default)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, well, we haven&amp;rsquo;t installed any new versions yet, so all we have available is &lt;code&gt;system&lt;/code&gt; which is what we started with.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get a freshie.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm install 4.1.1
######################################################################## 100.0%
WARNING: checksums are currently disabled for node.js v4.0 and later
Now using node v4.1.1 (npm v2.14.4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, I&amp;rsquo;ll Google that warning later, but we have a new version of Node available, but we&amp;rsquo;re not using it yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list
         v4.1.1
-&amp;gt;       system
node -&amp;gt; stable (-&amp;gt; v4.1.1) (default)
stable -&amp;gt; 4.1 (-&amp;gt; v4.1.1) (default)
iojs -&amp;gt; N/A (default)

$ node --version
v0.10.22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok so let&amp;rsquo;s use our new version now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm use 4.1.1
Now using node v4.1.1 (npm v2.14.4)

$ node --version
v4.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That easy. Now you can toggle back and forth between Node versions with nary a hassle. Go do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NPM Shrinkwrap is easy</title>
      <link>http://blog.flowstate.io/post/shrinkwrap/</link>
      <pubDate>Fri, 18 Sep 2015 12:52:45 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/shrinkwrap/</guid>
      <description>

&lt;p&gt;In this hypothetical example, you&amp;rsquo;re a programmer who has a project. In this project, you are using a bunch of dependencies, which you manage with NPM and are specified in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Whenever you build this app, you install all the things using &lt;code&gt;npm install&lt;/code&gt;.  You continue to build the app and deploy it and your users use it.&lt;/p&gt;

&lt;p&gt;Except one day you build the app and it breaks! WHY?! You haven&amp;rsquo;t even touched the code!&lt;/p&gt;

&lt;p&gt;Aha! A dependency has changed, or a dependency of a dependency and now our build is broken.&lt;/p&gt;

&lt;p&gt;So you&amp;rsquo;re telling me that unless every package uses specific package version, my build could break at ANY time?&lt;/p&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;There must be a way to fix this.&lt;/p&gt;

&lt;p&gt;There is!&lt;/p&gt;

&lt;h2 id=&#34;npm-shrinkwrap:03b1f98386b651e891c88835b47f2f3a&#34;&gt;NPM Shrinkwrap&lt;/h2&gt;

&lt;p&gt;NPM Shrinkwrap locks your entire dependency tree to the current installed version.  This is built into NPM and you can do it right now.&lt;/p&gt;

&lt;p&gt;This command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm shrinkwrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will generate a file called &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; that specified EXACTLY which version of each dependency will be installed when you call &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to update a package, run &lt;code&gt;npm update &amp;lt;package_name&amp;gt;&lt;/code&gt;. and then re-run &lt;code&gt;npm shrinkwrap&lt;/code&gt; to update your &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;if you want to see which packages are out of date, you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm outdated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you&amp;rsquo;ll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package        Current  Wanted  Latest  Location
lodash           3.7.0  3.10.1  3.10.1  lodash
moment          2.10.2  2.10.6  2.10.6  moment
q                1.3.0   1.4.1   1.4.1  q
wreck            5.5.1   5.6.1   6.2.0  wreck
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, shrinkwrap ignores your devDependencies you can include them by using the &lt;code&gt;--dev&lt;/code&gt; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm shrinkwrap --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how easy that is! So don&amp;rsquo;t live with broken builds, use NPM shrinkwrap and keep your dependecies where they belong.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
