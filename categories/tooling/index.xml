<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Tooling on blog.flowstate.io </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.flowstate.io/categories/tooling/</link>
    <language>en-us</language>
    <author>Oakley Hall</author>
    
    <updated>Mon, 25 Jul 2016 11:53:46 EDT</updated>
    
    <item>
      <title>Getting Started 0: The Terminal</title>
      <link>http://blog.flowstate.io/post/terminal/</link>
      <pubDate>Mon, 25 Jul 2016 11:53:46 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/terminal/</guid>
      <description>

&lt;p&gt;So you&amp;rsquo;re learning to code?  There first think you should get familiar with is the Terminal and the command line. Let&amp;rsquo;s discuss some basics.&lt;/p&gt;

&lt;h2 id=&#34;what-is-it:115290b373a664e595e935c25cb1d0c4&#34;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll keep my comments confined to OS X and Linux, since those are the environments I&amp;rsquo;m familiar with.&lt;/p&gt;

&lt;p&gt;The Terminal is an application that provides you a window through which to enter commands into the Unix &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_shell&#34;&gt;shell&lt;/a&gt; of your choice, most systems default to &lt;a href=&#34;https://www.techopedia.com/definition/3520/bourne-again-shell-bash&#34;&gt;BASH&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On OS X you can find the Terminal App in
&lt;code&gt;Applications -&amp;gt; Utilities -&amp;gt; Terminal.app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;on Linux
&lt;code&gt;Applications -&amp;gt; Terminal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/term.png&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-bother:115290b373a664e595e935c25cb1d0c4&#34;&gt;Why bother?&lt;/h2&gt;

&lt;p&gt;You might be thinking: &amp;ldquo;This seems like a lot of work. Why can&amp;rsquo;t I just doing everything from the Desktop.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Sure. You could, but you&amp;rsquo;ll be missing out on incredibly powerful tools and scripting capabilities.  As your programming projects become more complex, you&amp;rsquo;ll need more tools. &lt;a href=&#34;https://docs.python.org/2/library/simplehttpserver.html&#34;&gt;Local servers&lt;/a&gt;, &lt;a href=&#34;https://docs.python.org/2/library/simplehttpserver.html&#34;&gt;file manipulation&lt;/a&gt;, &lt;a href=&#34;https://docs.python.org/2/library/simplehttpserver.html&#34;&gt;automation&lt;/a&gt;, &lt;a href=&#34;http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html&#34;&gt;scripting&lt;/a&gt;, &lt;a href=&#34;http://blog.modulus.io/absolute-beginners-guide-to-nodejs&#34;&gt;NodeJS&lt;/a&gt;, &lt;a href=&#34;https://try.github.io/levels/1/challenges/1&#34;&gt;Git&lt;/a&gt; and a galaxy of other single purpose command line applications that you&amp;rsquo;ll weave into a efficient development environment.  You&amp;rsquo;ll also eventually have to deploy your work on a server somewhere and likely the only interface available to you will be the command line.&lt;/p&gt;

&lt;p&gt;At first it will take you more time to do things in the terminal and you&amp;rsquo;ll make mistakes, but think of it as and investment that will pay enormous dividends in the future.  Also, if you&amp;rsquo;re planning to work as a developer or in any other technical role, you&amp;rsquo;ll be expected to know your way around.&lt;/p&gt;

&lt;h2 id=&#34;basic-commands-and-tools:115290b373a664e595e935c25cb1d0c4&#34;&gt;Basic commands and tools&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at a few commands that may shed some light on what may initially feel like a very dark room.&lt;/p&gt;

&lt;h3 id=&#34;man:115290b373a664e595e935c25cb1d0c4&#34;&gt;man&lt;/h3&gt;

&lt;p&gt;Most terminal applications take a variety of flags and arguments. We&amp;rsquo;ll just cover the simple user cases here, but you can see everything that&amp;rsquo;s possible by using the &lt;code&gt;man&lt;/code&gt; (manual) command. When in doubt, &lt;a href=&#34;https://en.wikipedia.org/wiki/RTFM&#34;&gt;RTFM&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ man pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ctrl-c-and-ctrl-z:115290b373a664e595e935c25cb1d0c4&#34;&gt;Ctrl-C and Ctrl-Z&lt;/h3&gt;

&lt;p&gt;Many times per day, you will get stuck or want to exit a program you&amp;rsquo;ve started on the command line. These two key combos will do it.  You&amp;rsquo;ll learn the difference as you go, but for now try either or both to get out of a running process and back to the command prompt.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl-C&lt;/code&gt; cancels or kills a job. Technically it causes an interrupt signal to be sent to the program telling it to abort what it is doing and exit immediately.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl-Z&lt;/code&gt; &amp;ldquo;puts a job on hold and returns you to the prompt, but does not kill the job.&lt;/p&gt;

&lt;h3 id=&#34;pwd:115290b373a664e595e935c25cb1d0c4&#34;&gt;pwd&lt;/h3&gt;

&lt;p&gt;Print Working Directory. Basically asks &amp;ldquo;where am I now?&amp;rdquo;
For example I&amp;rsquo;m in my home directory here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pwd
/Users/oakley
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use this command liberally to see what directory you&amp;rsquo;re working in.&lt;/p&gt;

&lt;h3 id=&#34;ls:115290b373a664e595e935c25cb1d0c4&#34;&gt;ls&lt;/h3&gt;

&lt;p&gt;List file and directory names.  Basically, show me the contents of a directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls
Applications    Dropbox    Pictures    Sites
Desktop         Library    Public      Documents               
Movies          Downloads  Music                   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mkdir:115290b373a664e595e935c25cb1d0c4&#34;&gt;mkdir&lt;/h3&gt;

&lt;p&gt;Make a new directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir test-directory

$ ls
test-directory
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cd:115290b373a664e595e935c25cb1d0c4&#34;&gt;cd&lt;/h3&gt;

&lt;p&gt;Change directory. Specify the directory you want to work in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd test-directory

$ pwd
/Users/oakley/test/test-directory
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;touch:115290b373a664e595e935c25cb1d0c4&#34;&gt;touch&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; is the equivalent of creating or opening a file and saving it without any actual changes.  It&amp;rsquo;s often used to create new files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch file.txt

$ ls
file.txt       test-directory
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rm:115290b373a664e595e935c25cb1d0c4&#34;&gt;rm&lt;/h3&gt;

&lt;p&gt;Remove a file. Like FOREVER. Not put it in the trash, it&amp;rsquo;s gone.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm file.txt

$ ls
test-directory
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cp:115290b373a664e595e935c25cb1d0c4&#34;&gt;cp&lt;/h3&gt;

&lt;p&gt;Copy a file to another location.
In this example, we&amp;rsquo;ll recreate &lt;code&gt;file.txt&lt;/code&gt;, use &lt;code&gt;cp&lt;/code&gt; to copy it into &lt;code&gt;test-directory&lt;/code&gt;, then use &lt;code&gt;ls&lt;/code&gt; to see that &lt;code&gt;file.txt&lt;/code&gt; has been copied there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch file.txt 
$ cp file.txt test-directory
$ ls test-directory 
file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mv:115290b373a664e595e935c25cb1d0c4&#34;&gt;mv&lt;/h3&gt;

&lt;p&gt;Move a file. Same as &lt;code&gt;cp&lt;/code&gt;, but removes the original.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch foo.txt

$ ls
file.txt    foo.txt    test-directory

$ mv foo.txt test-directory

$ ls
file.txt   test-directory

$ ls test-directory
file.txt foo.txt

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cat:115290b373a664e595e935c25cb1d0c4&#34;&gt;cat&lt;/h3&gt;

&lt;p&gt;Display a file&amp;rsquo;s contents on screen or concatenate files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat file.txt
Some text here...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pipes:115290b373a664e595e935c25cb1d0c4&#34;&gt;pipes&lt;/h3&gt;

&lt;p&gt;Pipes let you pass the output of one command into another command as an argument.  Let&amp;rsquo;s say you want your computer to say the contents of a directory out loud.  You could pipe the output of &lt;code&gt;ls&lt;/code&gt; to &lt;code&gt;say&lt;/code&gt; or &lt;code&gt;espeak&lt;/code&gt; on linux.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls | say
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try it!&lt;/p&gt;

&lt;h3 id=&#34;text-editors:115290b373a664e595e935c25cb1d0c4&#34;&gt;text editors&lt;/h3&gt;

&lt;p&gt;You can also use command line text editors like vi, vim, Emacs, nano and a million others.&lt;/p&gt;

&lt;p&gt;This is a whole different lesson, but play around and see what&amp;rsquo;s there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;now-what:115290b373a664e595e935c25cb1d0c4&#34;&gt;Now what?&lt;/h2&gt;

&lt;p&gt;Now you get started playing around.  Try to incorporate the command line in your day to day work.  Instead of opening finder, try to do things in terminal. Copy files, look in directories, edit documents.  The more you use it, the more it will become part of you and your power will grow.&lt;/p&gt;

&lt;p&gt;Soon you will be invincible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use NVM</title>
      <link>http://blog.flowstate.io/post/nvm/</link>
      <pubDate>Thu, 01 Oct 2015 17:23:41 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/nvm/</guid>
      <description>&lt;p&gt;NVM is the Node Version Manager, a bash script you can and should use to manage multiple NodeJS versions.  As a Node developer, you&amp;rsquo;ll invariably find yourself dealing with Node version compatibility issues forcing you to switch versions of Node depending on what you&amp;rsquo;re working on.  It would be nice if Node offered a command like &lt;code&gt;use 4.1.1&lt;/code&gt;, well NVM does just that.&lt;/p&gt;

&lt;p&gt;First install the latest version from &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/&amp;lt;LATEST_VERSION/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install the &lt;code&gt;.nvm&lt;/code&gt; file in your user dir and add some lines to your &lt;code&gt;.bashrc&lt;/code&gt; to source it. If you&amp;rsquo;re seeing some error like &lt;code&gt;-bash: nvm: command not found&lt;/code&gt; when you try to run the app, chances are you&amp;rsquo;re not sourcing it correctly.&lt;/p&gt;

&lt;p&gt;Before we start, let&amp;rsquo;s look at what version of Node we&amp;rsquo;re running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node --version
v0.10.22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yikes! Time for an upgrade. What does NVM have available for us?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list

-&amp;gt;       system
node -&amp;gt; stable (-&amp;gt; N/A) (default)
iojs -&amp;gt; N/A (default)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, well, we haven&amp;rsquo;t installed any new versions yet, so all we have available is &lt;code&gt;system&lt;/code&gt; which is what we started with.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get a freshie.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm install 4.1.1
######################################################################## 100.0%
WARNING: checksums are currently disabled for node.js v4.0 and later
Now using node v4.1.1 (npm v2.14.4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, I&amp;rsquo;ll Google that warning later, but we have a new version of Node available, but we&amp;rsquo;re not using it yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list
         v4.1.1
-&amp;gt;       system
node -&amp;gt; stable (-&amp;gt; v4.1.1) (default)
stable -&amp;gt; 4.1 (-&amp;gt; v4.1.1) (default)
iojs -&amp;gt; N/A (default)

$ node --version
v0.10.22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok so let&amp;rsquo;s use our new version now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm use 4.1.1
Now using node v4.1.1 (npm v2.14.4)

$ node --version
v4.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That easy. Now you can toggle back and forth between Node versions with nary a hassle. Go do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NPM Shrinkwrap is easy</title>
      <link>http://blog.flowstate.io/post/shrinkwrap/</link>
      <pubDate>Fri, 18 Sep 2015 12:52:45 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/shrinkwrap/</guid>
      <description>

&lt;p&gt;In this hypothetical example, you&amp;rsquo;re a programmer who has a project. In this project, you are using a bunch of dependencies, which you manage with NPM and are specified in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Whenever you build this app, you install all the things using &lt;code&gt;npm install&lt;/code&gt;.  You continue to build the app and deploy it and your users use it.&lt;/p&gt;

&lt;p&gt;Except one day you build the app and it breaks! WHY?! You haven&amp;rsquo;t even touched the code!&lt;/p&gt;

&lt;p&gt;Aha! A dependency has changed, or a dependency of a dependency and now our build is broken.&lt;/p&gt;

&lt;p&gt;So you&amp;rsquo;re telling me that unless every package uses specific package version, my build could break at ANY time?&lt;/p&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;There must be a way to fix this.&lt;/p&gt;

&lt;p&gt;There is!&lt;/p&gt;

&lt;h2 id=&#34;npm-shrinkwrap:03b1f98386b651e891c88835b47f2f3a&#34;&gt;NPM Shrinkwrap&lt;/h2&gt;

&lt;p&gt;NPM Shrinkwrap locks your entire dependency tree to the current installed version.  This is built into NPM and you can do it right now.&lt;/p&gt;

&lt;p&gt;This command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm shrinkwrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will generate a file called &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; that specified EXACTLY which version of each dependency will be installed when you call &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to update a package, run &lt;code&gt;npm update &amp;lt;package_name&amp;gt;&lt;/code&gt;. and then re-run &lt;code&gt;npm shrinkwrap&lt;/code&gt; to update your &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;if you want to see which packages are out of date, you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm outdated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you&amp;rsquo;ll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package        Current  Wanted  Latest  Location
lodash           3.7.0  3.10.1  3.10.1  lodash
moment          2.10.2  2.10.6  2.10.6  moment
q                1.3.0   1.4.1   1.4.1  q
wreck            5.5.1   5.6.1   6.2.0  wreck
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, shrinkwrap ignores your devDependencies you can include them by using the &lt;code&gt;--dev&lt;/code&gt; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm shrinkwrap --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how easy that is! So don&amp;rsquo;t live with broken builds, use NPM shrinkwrap and keep your dependecies where they belong.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack Loaders</title>
      <link>http://blog.flowstate.io/post/webpack_loaders/</link>
      <pubDate>Thu, 20 Aug 2015 09:00:59 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/webpack_loaders/</guid>
      <description>

&lt;p&gt;Start with the &lt;a href=&#34;http://blog.flowstate.io/post/webpack&#34;&gt;webpack basics&lt;a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-loader:b776dbab38d940662c0f8f41f4c6e4fe&#34;&gt;What is a loader?&lt;/h2&gt;

&lt;p&gt;A loader is &lt;a href=&#34;http://webpack.github.io/docs/loaders.html&#34;&gt;basically a preprocessor&lt;/a&gt;. It&amp;rsquo;s how you let webpack know that you&amp;rsquo;d like to transform a module in some specified way. For example, let&amp;rsquo;s say you are writing your code in &lt;a href=&#34;https://hacks.mozilla.org/category/es6-in-depth/&#34;&gt;ES6&lt;/a&gt; and you&amp;rsquo;d like webpack to process that into ES5 so the browser can parse it.  You&amp;rsquo;d define a loader for &lt;a href=&#34;https://babeljs.io/&#34;&gt;babel&lt;/a&gt; that looks for &lt;code&gt;.js&lt;/code&gt; files being required and then runs them through babel before adding them to the &lt;a href=&#34;https://github.com/webpack/webpack/tree/master/examples/commonjs#jsoutputjs&#34;&gt;bundle&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;example-please:b776dbab38d940662c0f8f41f4c6e4fe&#34;&gt;Example, please&lt;/h2&gt;

&lt;p&gt;You can check out the working example here &lt;a href=&#34;https://github.com/ohall/webpack-loaders-example&#34;&gt;repo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here is our &lt;code&gt;index.js&lt;/code&gt; with some cutting edge ECMAScript6 code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// look at this cool ES6 syntax!
import sweet from &#39;./sweet&#39;;

sweet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let&amp;rsquo;s run &lt;code&gt;webpack&lt;/code&gt; and get our bundle on.&lt;/p&gt;

&lt;p&gt;Oh no! Gruesome error!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ERROR in ./index.js
Module parse failed: /Users/ohall/Documents/projects/webpack-loaders-example/index.js Line 2: Unexpected reserved word
You may need an appropriate loader to handle this file type.
| // look at this cool ES6 syntax!
| import sweet from &#39;./sweet&#39;;
| 
| sweet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to fix this by defining a loader in order to preprocess our ES6 stuff into palatable ES5.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s update our &lt;code&gt;webpack.config.js&lt;/code&gt; like so.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {
  entry: &amp;quot;./index.js&amp;quot;,
  output: {
    path: __dirname,
    filename: &amp;quot;bundle.js&amp;quot;
  },
  module: {
    loaders: [
      { test: /\.js$/, exclude: /node_modules/, loader: &#39;babel&#39;}
    ]
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let&amp;rsquo;s run &lt;code&gt;webpack&lt;/code&gt; AGAIN!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SCORE!&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Hash: 3e3bbd08bc6f0ce8543b
Version: webpack 1.11.0
Time: 430ms
    Asset     Size  Chunks             Chunk Names
bundle.js  1.96 kB       0  [emitted]  main
    + 2 hidden modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our &lt;code&gt;bundle.js&lt;/code&gt; is complete and looking right.&lt;/p&gt;

&lt;h2 id=&#34;ok-so-what-just-happened:b776dbab38d940662c0f8f41f4c6e4fe&#34;&gt;Ok, so what just happened?&lt;/h2&gt;

&lt;p&gt;I added a &lt;code&gt;module&lt;/code&gt; to our &lt;code&gt;webpack.config.js&lt;/code&gt; with a &lt;code&gt;loaders&lt;/code&gt; array.  Inside that array, I defined a babel loader.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  module: {
    loaders: [
      { test: /\.js$/, exclude: /node_modules/, loader: &#39;babel&#39;}
    ]
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;What the loader does is:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply the test.  In this case, looking for files that end in &lt;code&gt;.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Exclude and files in the &lt;code&gt;node_modules&lt;/code&gt; dir, bc that&amp;rsquo;s not our concern.&lt;/li&gt;
&lt;li&gt;Run the files that match our test through the loader we&amp;rsquo;ve specified, in this case, babel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what we have is our ES6 source being parsed by babel &lt;strong&gt;before&lt;/strong&gt; being added to our &lt;code&gt;bundle.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Simple, right?&lt;/p&gt;

&lt;h2 id=&#34;what-else-can-i-use-loaders-for:b776dbab38d940662c0f8f41f4c6e4fe&#34;&gt;What else can I use loaders for.&lt;/h2&gt;

&lt;p&gt;You can process anything.  Common use cases include &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, static assets like images, dialects like CoffeeScript and Typescript.  The webpack wiki contains a &lt;a href=&#34;https://github.com/webpack/docs/wiki/list-of-loaders&#34;&gt;list of available loaders&lt;/a&gt; or you can &lt;a href=&#34;http://webpack.github.io/docs/loaders.html#writing-a-loader&#34;&gt;roll your own&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack: Rage to sage</title>
      <link>http://blog.flowstate.io/post/webpack/</link>
      <pubDate>Fri, 14 Aug 2015 20:25:50 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/webpack/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;re like me, your first encounter with Webpack was probably hostile. You&amp;rsquo;re trying to learn some new technology like React, launching a demo project to see how it works and something is broken. You examine the build scripts and suddenly you&amp;rsquo;re confronted with this arcane looking &lt;code&gt;webpack.config.js&lt;/code&gt; file. You cruise over to the documentation for Webpack. It has many pages, none of them marked &lt;em&gt;TL;DR&lt;/em&gt;. You hate reading documentation! This is not even what you were trying to do! You&amp;rsquo;re yak shaving again! Curse you JS tooling cambrian explosion! Gahh!!&lt;/p&gt;

&lt;p&gt;Exhale. Webpack is not that complicated, especially for simple work flows. It&amp;rsquo;s becoming an integral part of the JS ecosystem and so it&amp;rsquo;s worth sitting down and learning it. You can do this, just focus.&lt;/p&gt;

&lt;h3 id=&#34;tl-dr:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;TL;DR&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Webpack is a module bundler like Browserify, but with better support for Node and React.&lt;/li&gt;
&lt;li&gt;Webpack is not that hard.&lt;/li&gt;
&lt;li&gt;Here&amp;rsquo;s a simple example: &lt;a href=&#34;https://github.com/ohall/webpack-example&#34;&gt;https://github.com/ohall/webpack-example&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-is-the-point-of-webpack:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;What is the point of Webpack?&lt;/h3&gt;

&lt;p&gt;Webpack is a module bundler. You may be familiar with &lt;code&gt;Browserify&lt;/code&gt; which allows you to use the AMD (Asynchronous Module Definition) syntax (&lt;code&gt;var foo = require(&#39;bar&#39;);&lt;/code&gt;) in your frontend code, much the same and you would in your Node applications. Basically this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// awesome is exported in another file
var wicked = require(&#39;awesome&#39;);
wicked();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These tools basically suck in all the JS files required by your app and concatenate them into one JS file that you can add to your app. This is WAY better that managing a bunch of script tags in your &lt;code&gt;index.html&lt;/code&gt; or wherever. You can configure &lt;a href=&#34;http://webpack.github.io/docs/loaders.html&#34;&gt;loaders&lt;/a&gt; to do the same thing with other static files, like css and images.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://webpack.github.io/assets/what-is-webpack.png&#34; alt=&#34;webpack&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;but-why-webpack-doesn-t-browserify-do-this-more-simply:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;But why Webpack? Doesn&amp;rsquo;t Browserify do this more simply?&lt;/h3&gt;

&lt;p&gt;There are &lt;a href=&#34;http://mattdesl.svbtle.com/browserify-vs-webpack&#34;&gt;compelling&lt;/a&gt; &lt;a href=&#34;http://blog.namangoel.com/browserify-vs-webpack-js-drama&#34;&gt;arguments&lt;/a&gt; for both &lt;a href=&#34;https://www.reddit.com/r/reactjs/comments/30at04/webpack_vs_browserify_whats_best_for_react/&#34;&gt;technologies&lt;/a&gt;. One big arguement for Webpack is the ability to do &lt;a href=&#34;https://gaearon.github.io/react-hot-loader/&#34;&gt;React Hot-loading&lt;/a&gt; easily, speeding up dev time. But this post isn&amp;rsquo;t about choosing between the two. For whatever reason, you&amp;rsquo;re using Webpack now, DEAL WITH IT.&lt;/p&gt;

&lt;h3 id=&#34;i-m-looking-at-webpack-config-js-and-i-m-angry:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;I&amp;rsquo;m looking at webpack.config.js and I&amp;rsquo;m angry.&lt;/h3&gt;

&lt;p&gt;Whoa. It&amp;rsquo;s cool. Look, let&amp;rsquo;s start with a very simple example, so we can improve the signal to noise ratio. You can find a repo with this example here: &lt;a href=&#34;https://github.com/ohall/webpack-example&#34;&gt;https://github.com/ohall/webpack-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you have an &lt;code&gt;index.js&lt;/code&gt; file;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// index.js
var sweet = require(&#39;./sweet&#39;);
sweet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That requires a sweet module &lt;code&gt;sweet.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// sweet.js
module.exports = function () {
  window.onload = function () {
    var t = document.createTextNode(&#39;You did it! Sweet!&#39;);
    document.body.appendChild(t);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can set up our super simple &lt;code&gt;webpack.config.js&lt;/code&gt; file will export a module with &lt;code&gt;index.js&lt;/code&gt; as our entry file and output a file called &lt;code&gt;bundle.js&lt;/code&gt;. Webpack figures out the rest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {
    entry: &amp;quot;./index.js&amp;quot;,
    output: {
        path: __dirname,
        filename: &amp;quot;bundle.js&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: &lt;code&gt;__dirname&lt;/code&gt; is a &lt;a href=&#34;https://nodejs.org/docs/latest/api/globals.html#globals_dirname&#34;&gt;reference in Node for the currently executing directory.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve installed Webpack globally,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install webpack -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can run &lt;code&gt;webpack&lt;/code&gt; and create a &lt;code&gt;bundle.js&lt;/code&gt; file that includes all the modules we need and use it in your HTML. &lt;a href=&#34;https://github.com/ohall/webpack-example&#34;&gt;Run the example&lt;/a&gt; to see what the bundle looks like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--index.html--&amp;gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There is SO much more to Webpack, that I&amp;rsquo;ll dive into in the next post. For now though, you have enough to get you a footing in Webpack and start experimenting. JS tooling can be frustrating, especially when it feels like you have to learn a whole new build system every week. Don&amp;rsquo;t despair! Start simple, take time to learn it and try to have fun.&lt;/p&gt;

&lt;p&gt;Next up: &lt;a href=&#34;http://blog.flowstate.io/post/webpack_loaders&#34;&gt;webpack loaders&lt;a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
