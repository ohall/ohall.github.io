<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on blog.flowstate.io </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.flowstate.io/post/</link>
    <language>en-us</language>
    <author>Oakley Hall</author>
    
    <updated>Tue, 02 Feb 2016 08:33:38 EST</updated>
    
    <item>
      <title>Intro to OneOps</title>
      <link>http://blog.flowstate.io/post/oneops/</link>
      <pubDate>Tue, 02 Feb 2016 08:33:38 EST</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/oneops/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://www.businesscloudnews.com/files/2016/01/Walmart-OneOps.jpg&#34; alt=&#34;OneOps Banner&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.walmartlabs.com/&#34;&gt;WalmartLabs&lt;/a&gt; has recently open sources their cloud management platform &lt;a href=&#34;http://www.walmartlabs.com/2016/01/oneops-now-available/&#34;&gt;OneOps&lt;/a&gt;.  You can dive into the documentation &lt;a href=&#34;http://oneops.com/&#34;&gt;here&lt;/a&gt; or examine the source code &lt;a href=&#34;https://github.com/oneops/&#34;&gt;here&lt;/a&gt;. As a OneOps user, I&amp;rsquo;d like to offer a quick spin around OneOps and an overview of what it does.&lt;/p&gt;

&lt;h1 id=&#34;what-is-it:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;What is it?&lt;/h1&gt;

&lt;p&gt;OneOps allows you to configure VM clusters using a GUI or a RESTful API in a way that is cloud provider agnostic. Meaning, you can use cores from AWS or any other cloud provider or a private cloud.&lt;/p&gt;

&lt;p&gt;Configurations and environment settings are maintained in OneOps and can easily be ported between cloud providers.&lt;/p&gt;

&lt;h1 id=&#34;how-does-it-work:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;How does it work?&lt;/h1&gt;

&lt;p&gt;OneOps has a few basic organizational concepts which you&amp;rsquo;ll see repeatedly.&lt;/p&gt;

&lt;h2 id=&#34;organization:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;Organization:&lt;/h2&gt;

&lt;p&gt;An Organization is group of users, clouds and assemblies that share settings, quotas and permissions. From the Organization view you can see a summary of users, clouds, assemblies, notifications, ongoing deployments, VM health statistics and reports for all cores in the Organization that includes allocation and quotas.&lt;/p&gt;

&lt;h2 id=&#34;assembly:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;Assembly:&lt;/h2&gt;

&lt;p&gt;This essentially a project. The Assembly consists of 3 phases. &lt;strong&gt;Design&lt;/strong&gt;, &lt;strong&gt;Transition&lt;/strong&gt;, &lt;strong&gt;Operate&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;design:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;Design:&lt;/h2&gt;

&lt;p&gt;The Design is basically the template for how your VM cluster will be configured.&lt;/p&gt;

&lt;p&gt;Think of a design as a prototype which will be inherited in the Transition then instantiated in an environment&lt;/p&gt;

&lt;p&gt;A design consists of one or more Platforms for which you&amp;rsquo;ll configure the prototype in the design phase.&lt;/p&gt;

&lt;h4 id=&#34;platform:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;Platform&lt;/h4&gt;

&lt;p&gt;The Platform represents a VM cluster. A Design will contain one or more platforms. For example, you can have a design that contains just a backend server OR it could contain server, database and apache components, depending how you want to organize things. Platforms can be built from scratch, but is generally built from a &lt;a href=&#34;http://oneops.github.io/user/references/#platform-packs&#34;&gt;Pack&lt;/a&gt; which is a set of preconfigured Components.&lt;/p&gt;

&lt;h4 id=&#34;components:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;Components&lt;/h4&gt;

&lt;p&gt;Components represent configurations and installed software and files on the VMs. Some examples include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;SSH keys&lt;/li&gt;
&lt;li&gt;Load Balancer&lt;/li&gt;
&lt;li&gt;Redis DB&lt;/li&gt;
&lt;li&gt;Mounted volumes&lt;/li&gt;
&lt;li&gt;Cron jobs&lt;/li&gt;
&lt;li&gt;File&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The NodeJS component for example installs a node binary on your cluster, and includes fields for the user to define, version, install location, log file location, etc.&lt;/p&gt;

&lt;p&gt;Another example is a File component which allows to you place a file in an arbitrary location on your cluster and provides a field for and execute command. You might use this to execute a shell script on your cluster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oneops/oneops.github.io/master/assets/local/images/design-graph.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;transition:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;Transition:&lt;/h2&gt;

&lt;p&gt;In the transition phase you will: Configure environments. (PROD, STAGE, QA, etc.) Determine which clouds your platforms will be deployed on in those environments. Set environment specific configurations. It is also in the transition phase that you deploy your platforms.&lt;/p&gt;

&lt;p&gt;When you create an environment you&amp;rsquo;ll &amp;ldquo;Pull&amp;rdquo; your design into it in order to set all the configurations for that environment. In the Transition tab in the GUI you&amp;rsquo;ll see the same fields as in Design, pre-populated with the values set in the Design. However you can change any of those values and that change will be reflected in this environment. This change will be overwritten next time you pull a design change UNLESS you LOCK the field.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oneops/oneops.github.io/master/assets/local/images/lock.png&#34; alt=&#34;lock&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve configured your environment, you&amp;rsquo;ll commit the changes and deploy them. This phase actually provisions and configures your VMs in real life on real machines. All components will be deployed in the initial deployment. On subsequent deployments, on components that have been changed or explicitly &amp;ldquo;Touched&amp;rdquo; will be deployed.&lt;/p&gt;

&lt;p&gt;You can touch a component any time from its bread crumb menu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oneops/oneops.github.io/master/assets/local/images/GettingStartedEC2CommitAndDeploy.png&#34; alt=&#34;transition&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;operate:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;Operate:&lt;/h2&gt;

&lt;p&gt;The Operate phase is how you view, monitor and control your clusters now that they are active. You can see the health of individual computes, stop, repair or replace them. you can also see vital information about your VMs including IPs and host names.&lt;/p&gt;

&lt;p&gt;Drilling down in a component in the Operate view will show all the computes it is installed on and a summary of attributes. You can select a compute and see the state of that component as it exists on that compute. This view shows the configuration, notifications, logs and some actions you can execute on the component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oneops/oneops.github.io/master/assets/local/images/assess-health-operate.png&#34; alt=&#34;operate&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;api:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;API&lt;/h2&gt;

&lt;p&gt;There will be a lot of cases where you&amp;rsquo;ll want to integrate OneOps with other components in the build/deploy pipeline or simple script oft repeated operations like deployments. For this, OneOps provides a &lt;a href=&#34;http://oneops.github.io/developer/references/#oneops-api-documentation&#34;&gt;RESTful API&lt;/a&gt;. We&amp;rsquo;ll go into more detail about OneOp API usage in another post, but suffice it to say that as your usage of OneOps increases, you&amp;rsquo;ll find yourself increasingly relying on this feature to integrate OneOps into your pipeline. OneOps also provides a &lt;a href=&#34;http://oneops.github.io/admin/key-concepts/#cli&#34;&gt;Ruby CLI&lt;/a&gt; to the API, which you can install.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;Conclusion&lt;/h2&gt;

&lt;h3 id=&#34;the-good:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;The good&lt;/h3&gt;

&lt;p&gt;OneOps is a powerful cloud management tool that you can experiment with today. Right off the shelf it provides a nice end to end solution for configuring and managing a range of cloud solutions. Standing up VM clusters with simple preset configurations is easy and viewing and maintaining VM health can be done with just a few clicks.&lt;/p&gt;

&lt;h3 id=&#34;the-not-as-good:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;The not as good&lt;/h3&gt;

&lt;p&gt;The operations executed by OneOps are often complex and debugging failures can be difficult. &lt;a href=&#34;http://oneops.com/contribute.html&#34;&gt;The OneOps team&lt;/a&gt; is incredibly responsive, but at times it can feel like there is a little black magic going on behind the scenes. The version control scheme for components and configurations can be opaque.  There are often times when you&amp;rsquo;d like to just use versioned files from Github or the like and while it&amp;rsquo;s possible, it&amp;rsquo;s not always obvious how to do it.&lt;/p&gt;

&lt;h3 id=&#34;the-future:8f7e8c26f6684d9b124c0f8a7fd2167e&#34;&gt;The future&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m glad that now that OneOps is open source, the response to my complaints will be &amp;ldquo;File a PR!&amp;rdquo;. I think community involvement will make an already powerful tool even more useful and user friendly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to check if a port is open on a remote server using netcat</title>
      <link>http://blog.flowstate.io/post/portopen/</link>
      <pubDate>Mon, 05 Oct 2015 15:15:15 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/portopen/</guid>
      <description>&lt;p&gt;Assuming you have ssh access to the remote server you can check the status of a give port with netcat (&lt;code&gt;nc&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In a terminal window logged into the server use this command with the &lt;code&gt;-l&lt;/code&gt; flag to listen and the port you want to test (by listening on).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nc -l 443
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will leave you with a prompt, don&amp;rsquo;t do anything yet.&lt;/p&gt;

&lt;p&gt;In another terminal on your local machine. Call &lt;code&gt;nc&lt;/code&gt; again, this time with the IP of your remote server and the port to test as params. If nothing is listening on that port, nothing will happen. If it is closed, it will timeout. (But we KNOW netcat is listening!)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nc XXX.XX.XX.XXX 443
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go back to the terminal window on the server and type something in the prompt and hit enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nc -l 443
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;on the client machine, you should see this come though&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nc XXX.XX.XX.XXX 443
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can type messages both ways, but you know know you have an open port.&lt;/p&gt;

&lt;p&gt;Cool right? &amp;hellip;whatever, I think it&amp;rsquo;s cool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use NVM</title>
      <link>http://blog.flowstate.io/post/nvm/</link>
      <pubDate>Thu, 01 Oct 2015 17:23:41 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/nvm/</guid>
      <description>&lt;p&gt;NVM is the Node Version Manager, a bash script you can and should use to manage multiple NodeJS versions.  As a Node developer, you&amp;rsquo;ll invariably find yourself dealing with Node version compatibility issues forcing you to switch versions of Node depending on what you&amp;rsquo;re working on.  It would be nice if Node offered a command like &lt;code&gt;use 4.1.1&lt;/code&gt;, well NVM does just that.&lt;/p&gt;

&lt;p&gt;First install the latest version from &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/&amp;lt;LATEST_VERSION/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install the &lt;code&gt;.nvm&lt;/code&gt; file in your user dir and add some lines to your &lt;code&gt;.bashrc&lt;/code&gt; to source it. If you&amp;rsquo;re seeing some error like &lt;code&gt;-bash: nvm: command not found&lt;/code&gt; when you try to run the app, chances are you&amp;rsquo;re not sourcing it correctly.&lt;/p&gt;

&lt;p&gt;Before we start, let&amp;rsquo;s look at what version of Node we&amp;rsquo;re running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node --version
v0.10.22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yikes! Time for an upgrade. What does NVM have available for us?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list

-&amp;gt;       system
node -&amp;gt; stable (-&amp;gt; N/A) (default)
iojs -&amp;gt; N/A (default)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah, well, we haven&amp;rsquo;t installed any new versions yet, so all we have available is &lt;code&gt;system&lt;/code&gt; which is what we started with.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get a freshie.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm install 4.1.1
######################################################################## 100.0%
WARNING: checksums are currently disabled for node.js v4.0 and later
Now using node v4.1.1 (npm v2.14.4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, I&amp;rsquo;ll Google that warning later, but we have a new version of Node available, but we&amp;rsquo;re not using it yet.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm list
         v4.1.1
-&amp;gt;       system
node -&amp;gt; stable (-&amp;gt; v4.1.1) (default)
stable -&amp;gt; 4.1 (-&amp;gt; v4.1.1) (default)
iojs -&amp;gt; N/A (default)

$ node --version
v0.10.22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok so let&amp;rsquo;s use our new version now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nvm use 4.1.1
Now using node v4.1.1 (npm v2.14.4)

$ node --version
v4.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That easy. Now you can toggle back and forth between Node versions with nary a hassle. Go do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NPM Shrinkwrap is easy</title>
      <link>http://blog.flowstate.io/post/shrinkwrap/</link>
      <pubDate>Fri, 18 Sep 2015 12:52:45 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/shrinkwrap/</guid>
      <description>

&lt;p&gt;In this hypothetical example, you&amp;rsquo;re a programmer who has a project. In this project, you are using a bunch of dependencies, which you manage with NPM and are specified in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Whenever you build this app, you install all the things using &lt;code&gt;npm install&lt;/code&gt;.  You continue to build the app and deploy it and your users use it.&lt;/p&gt;

&lt;p&gt;Except one day you build the app and it breaks! WHY?! You haven&amp;rsquo;t even touched the code!&lt;/p&gt;

&lt;p&gt;Aha! A dependency has changed, or a dependency of a dependency and now our build is broken.&lt;/p&gt;

&lt;p&gt;So you&amp;rsquo;re telling me that unless every package uses specific package version, my build could break at ANY time?&lt;/p&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;There must be a way to fix this.&lt;/p&gt;

&lt;p&gt;There is!&lt;/p&gt;

&lt;h2 id=&#34;npm-shrinkwrap:03b1f98386b651e891c88835b47f2f3a&#34;&gt;NPM Shrinkwrap&lt;/h2&gt;

&lt;p&gt;NPM Shrinkwrap locks your entire dependency tree to the current installed version.  This is built into NPM and you can do it right now.&lt;/p&gt;

&lt;p&gt;This command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm shrinkwrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will generate a file called &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; that specified EXACTLY which version of each dependency will be installed when you call &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to update a package, run &lt;code&gt;npm update &amp;lt;package_name&amp;gt;&lt;/code&gt;. and then re-run &lt;code&gt;npm shrinkwrap&lt;/code&gt; to update your &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;if you want to see which packages are out of date, you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm outdated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you&amp;rsquo;ll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package        Current  Wanted  Latest  Location
lodash           3.7.0  3.10.1  3.10.1  lodash
moment          2.10.2  2.10.6  2.10.6  moment
q                1.3.0   1.4.1   1.4.1  q
wreck            5.5.1   5.6.1   6.2.0  wreck
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, shrinkwrap ignores your devDependencies you can include them by using the &lt;code&gt;--dev&lt;/code&gt; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm shrinkwrap --dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how easy that is! So don&amp;rsquo;t live with broken builds, use NPM shrinkwrap and keep your dependecies where they belong.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>systemd</title>
      <link>http://blog.flowstate.io/post/systemd/</link>
      <pubDate>Wed, 26 Aug 2015 07:51:50 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/systemd/</guid>
      <description>

&lt;h2 id=&#34;intro:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;systemd is an init system that most linux distributions are standardizing on and a crucial tool for any system admin or devops engineer.&lt;/p&gt;

&lt;p&gt;In Unix and Linux, background processes are called daemons.  systemd provides a syntax for creating objects that can be managed by the daemons in the form of &lt;strong&gt;units&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can see what units you have on a machine with the &lt;a href=&#34;https://wiki.archlinux.org/index.php/Systemd#Basic_systemctl_usage&#34;&gt;&lt;code&gt;systemctl&lt;/code&gt;&lt;/a&gt; command. Here we&amp;rsquo;ll pass the parameter &lt;code&gt;list-units&lt;/code&gt;.  Which will list all the units.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl list-units
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll see some stuff like this describing your available units:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UNIT                                  LOAD   ACTIVE SUB       DESCRIPTION
proc-sys-fs-binfmt_misc.automount     loaded active waiting   Arbitrary sys-d
sys-devices-...dports-vport1p1.device loaded active plugged   /sys/devices/pci
sys-devices-...-block-vda-vda1.device loaded active plugged   /sys/devices/pci
app.mount                             loaded active mounted   /app
dev-mqueue.mount                      loaded active mounted   POSIX Message proc-fs-nfsd.mount                    loaded active mounted   RPC Pipe File sys
sys-kernel-debug.mount                loaded active mounted   Debug File System
var-lib-nfs-rpc_pipefs.mount          loaded active mounted   RPC Pipe File 
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-usage:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;Basic usage&lt;/h2&gt;

&lt;h3 id=&#34;getting-system-state:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;Getting system state&lt;/h3&gt;

&lt;h4 id=&#34;list-currently-running-units:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;List currently running units:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;or:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl list-units
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;list-failed-units:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;List failed units:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl --failed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Unit files can be found in&lt;/strong&gt; &lt;code&gt;/usr/lib/systemd/system/&lt;/code&gt; and &lt;code&gt;/etc/systemd/system/&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;list-installed-unit-files-with:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;List installed unit files with:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl list-unit-files
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;working-with-units:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;Working with units&lt;/h2&gt;

&lt;p&gt;Basic unit commands are:&lt;/p&gt;

&lt;h5 id=&#34;start-a-unit-immediately:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;Start a unit immediately:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl start unit
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;stop-a-unit-immediately:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;Stop a unit immediately:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl stop unit
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;restart-a-unit:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;Restart a unit:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl restart unit
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;ask-a-unit-to-reload-its-configuration:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;Ask a unit to reload its configuration:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl reload unit
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;show-the-status-of-a-unit-including-whether-it-is-running-or-not:43644c643e7f8892a9f8a45991d7cd50&#34;&gt;Show the status of a unit, including whether it is running or not:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl status unit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Systemd#Basic_systemctl_usage&#34;&gt;Other commands can be found here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack Loaders</title>
      <link>http://blog.flowstate.io/post/webpack_loaders/</link>
      <pubDate>Thu, 20 Aug 2015 09:00:59 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/webpack_loaders/</guid>
      <description>

&lt;p&gt;Start with the &lt;a href=&#34;http://blog.flowstate.io/post/webpack&#34;&gt;webpack basics&lt;a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-loader:b776dbab38d940662c0f8f41f4c6e4fe&#34;&gt;What is a loader?&lt;/h2&gt;

&lt;p&gt;A loader is &lt;a href=&#34;http://webpack.github.io/docs/loaders.html&#34;&gt;basically a preprocessor&lt;/a&gt;. It&amp;rsquo;s how you let webpack know that you&amp;rsquo;d like to transform a module in some specified way. For example, let&amp;rsquo;s say you are writing your code in &lt;a href=&#34;https://hacks.mozilla.org/category/es6-in-depth/&#34;&gt;ES6&lt;/a&gt; and you&amp;rsquo;d like webpack to process that into ES5 so the browser can parse it.  You&amp;rsquo;d define a loader for &lt;a href=&#34;https://babeljs.io/&#34;&gt;babel&lt;/a&gt; that looks for &lt;code&gt;.js&lt;/code&gt; files being required and then runs them through babel before adding them to the &lt;a href=&#34;https://github.com/webpack/webpack/tree/master/examples/commonjs#jsoutputjs&#34;&gt;bundle&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;example-please:b776dbab38d940662c0f8f41f4c6e4fe&#34;&gt;Example, please&lt;/h2&gt;

&lt;p&gt;You can check out the working example here &lt;a href=&#34;https://github.com/ohall/webpack-loaders-example&#34;&gt;repo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here is our &lt;code&gt;index.js&lt;/code&gt; with some cutting edge ECMAScript6 code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// look at this cool ES6 syntax!
import sweet from &#39;./sweet&#39;;

sweet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let&amp;rsquo;s run &lt;code&gt;webpack&lt;/code&gt; and get our bundle on.&lt;/p&gt;

&lt;p&gt;Oh no! Gruesome error!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ERROR in ./index.js
Module parse failed: /Users/ohall/Documents/projects/webpack-loaders-example/index.js Line 2: Unexpected reserved word
You may need an appropriate loader to handle this file type.
| // look at this cool ES6 syntax!
| import sweet from &#39;./sweet&#39;;
| 
| sweet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to fix this by defining a loader in order to preprocess our ES6 stuff into palatable ES5.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s update our &lt;code&gt;webpack.config.js&lt;/code&gt; like so.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {
  entry: &amp;quot;./index.js&amp;quot;,
  output: {
    path: __dirname,
    filename: &amp;quot;bundle.js&amp;quot;
  },
  module: {
    loaders: [
      { test: /\.js$/, exclude: /node_modules/, loader: &#39;babel&#39;}
    ]
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let&amp;rsquo;s run &lt;code&gt;webpack&lt;/code&gt; AGAIN!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SCORE!&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Hash: 3e3bbd08bc6f0ce8543b
Version: webpack 1.11.0
Time: 430ms
    Asset     Size  Chunks             Chunk Names
bundle.js  1.96 kB       0  [emitted]  main
    + 2 hidden modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our &lt;code&gt;bundle.js&lt;/code&gt; is complete and looking right.&lt;/p&gt;

&lt;h2 id=&#34;ok-so-what-just-happened:b776dbab38d940662c0f8f41f4c6e4fe&#34;&gt;Ok, so what just happened?&lt;/h2&gt;

&lt;p&gt;I added a &lt;code&gt;module&lt;/code&gt; to our &lt;code&gt;webpack.config.js&lt;/code&gt; with a &lt;code&gt;loaders&lt;/code&gt; array.  Inside that array, I defined a babel loader.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  module: {
    loaders: [
      { test: /\.js$/, exclude: /node_modules/, loader: &#39;babel&#39;}
    ]
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;What the loader does is:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply the test.  In this case, looking for files that end in &lt;code&gt;.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Exclude and files in the &lt;code&gt;node_modules&lt;/code&gt; dir, bc that&amp;rsquo;s not our concern.&lt;/li&gt;
&lt;li&gt;Run the files that match our test through the loader we&amp;rsquo;ve specified, in this case, babel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what we have is our ES6 source being parsed by babel &lt;strong&gt;before&lt;/strong&gt; being added to our &lt;code&gt;bundle.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Simple, right?&lt;/p&gt;

&lt;h2 id=&#34;what-else-can-i-use-loaders-for:b776dbab38d940662c0f8f41f4c6e4fe&#34;&gt;What else can I use loaders for.&lt;/h2&gt;

&lt;p&gt;You can process anything.  Common use cases include &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, static assets like images, dialects like CoffeeScript and Typescript.  The webpack wiki contains a &lt;a href=&#34;https://github.com/webpack/docs/wiki/list-of-loaders&#34;&gt;list of available loaders&lt;/a&gt; or you can &lt;a href=&#34;http://webpack.github.io/docs/loaders.html#writing-a-loader&#34;&gt;roll your own&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stop trying to learn a programming language</title>
      <link>http://blog.flowstate.io/post/so_you_wanna_dev%20copy/</link>
      <pubDate>Mon, 17 Aug 2015 06:03:19 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/so_you_wanna_dev%20copy/</guid>
      <description>

&lt;p&gt;I hear this question all the time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Which programming language should I learn?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My answer is always the same:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;It doesn&#39;t matter. Let the project decide for you.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-story:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;A story&lt;/h4&gt;

&lt;p&gt;When I first started my journey as a professional software developer, I got hired to work on an application written in a dying language on a platform that would soon be reviled the world over. This project was written in ActionScript 3, using the Flex framework. This was cutting edge stuff at the time, with a bright future, before Steve Jobs and 0 day exploits crapped in the Flash punch bowl.&lt;/p&gt;

&lt;p&gt;The point is, I started learning my trade using a language that I&amp;rsquo;d probably never see again, &lt;strong&gt;but that never mattered&lt;/strong&gt;. What mattered is that I worked with a brilliant team who took time to train me in the craft of programming. I learned the fundamentals of software development and I learned the tools I have used every day since I started that project.&lt;/p&gt;

&lt;p&gt;An aspiring programmer fretting about what language to develop in is like a carpenter worrying about what wood to use. It&amp;rsquo;s one of many choices to be made about a project, but it does not define the carpenter&amp;rsquo;s expertise.&lt;/p&gt;

&lt;p&gt;What matters is not the material you work in, but the tools, the craft, and the mindset you develop.&lt;/p&gt;

&lt;h2 id=&#34;the-tools:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;The tools&lt;/h2&gt;

&lt;h3 id=&#34;version-control:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;Version control&lt;/h3&gt;

&lt;p&gt;Understand &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&#34;&gt;version control&lt;/a&gt;. &lt;a href=&#34;https://git-scm.com/about&#34;&gt;Git&lt;/a&gt; is the most popular at the moment and seems to have a firm hold on the space. Use &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell&#34;&gt;Branch&lt;/a&gt;, &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tag&lt;/a&gt;, do &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;pull requests&lt;/a&gt;, even if they are just against your own code. You can version control any file. Use git for papers, blog posts, any document that you&amp;rsquo;ll want to have a record of changes to.&lt;/p&gt;

&lt;h3 id=&#34;text-editor:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;Text editor&lt;/h3&gt;

&lt;p&gt;Pick something and become a power user. I personally feel most at home in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34;&gt;IDE&lt;/a&gt;, so I spend most of my time writing JavaScript in &lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34;&gt;Webstorm&lt;/a&gt;, but I also love the light weight editor &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;. I&amp;rsquo;ve created a ton custom templates that autocomplete common code snippets. I know many keyboard shortcuts and tricks to simplify and expedite my workflow. It&amp;rsquo;s the equivalent of sitting in the driver&amp;rsquo;s seat of a car and adjusting the mirrors and familiarizing yourself with the controls. I try to learn a little something new every day. Some devs recommend working without a mouse one day a week. I haven&amp;rsquo;t had the nerve for that one yet.&lt;/p&gt;

&lt;h3 id=&#34;the-terminal:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;The terminal&lt;/h3&gt;

&lt;p&gt;This is among the most important skills you&amp;rsquo;ll need as a developer. This will come up over and over and over. Get comfortable navigating the file system in the terminal (&lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;), running applications, viewing and changing permissions(&lt;code&gt;chmod&lt;/code&gt;), piping data from one app to another (&lt;code&gt;|&lt;/code&gt;). Searching for text strings in a file or directory (&lt;code&gt;grep&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev1.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Eventually, you&amp;rsquo;ll need tools like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;scp&lt;/code&gt; and the whole panoply of command line utilities available on the Unix platform. I&amp;rsquo;m told Windows has stuff like that too.&lt;/p&gt;

&lt;h2 id=&#34;the-platform:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;The platform&lt;/h2&gt;

&lt;p&gt;Where is your code going to execute?  How will your users interact with it. For me, right now, that&amp;rsquo;s in the browser and &lt;a href=&#34;https://en.wikipedia.org/wiki/V8_(JavaScript_engine&#34;&gt;Node&amp;rsquo;s V8 engine&lt;/a&gt;). Well, &lt;a href=&#34;http://googleblog.blogspot.com/2009/10/what-is-browser.html&#34;&gt;what is a browser&lt;/a&gt;? &lt;a href=&#34;http://www.slashroot.in/httphypertext-transfer-protocol-request-and-response&#34;&gt;How does HTTP work&lt;/a&gt;? What &lt;a href=&#34;https://developer.chrome.com/devtools&#34;&gt;tools&lt;/a&gt; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Tools&#34;&gt;are&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/safari/tools/&#34;&gt;avaialble&lt;/a&gt; to &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dd565628(v=vs.85&#34;&gt;developers&lt;/a&gt;.aspx)?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev2.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;This is your world. These are the rules that will define what you can do and the platform on which you&amp;rsquo;ll be doing it. This is your users whole experience. Before you learn anything about a language, you have to understand the environment in which it will execute.&lt;/p&gt;

&lt;h2 id=&#34;the-craft:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;The craft&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://amzn.to/1hozy0j&#34;&gt;Buy this book&lt;/a&gt; and read it more than once.&lt;/p&gt;

&lt;p&gt;Your early code is going to suck. In fact most of your code is going to suck, as will most of the code you will ever read. Nevertheless, you will persevere in the eternal struggle against entropy. You will endeavor to make your code readable and performant and something you are proud to show to others. Embrace simplicity, modularity, decoupling, testing, automation, documentation and all the other &lt;a href=&#34;https://pragprog.com/the-pragmatic-programmer/extracts/tips&#34;&gt;hallmarks of a software craftsman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev3.png&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-mindset:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;The mindset&lt;/h2&gt;

&lt;h3 id=&#34;check-your-ego-at-the-door:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;Check your ego at the door.&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re going to hear criticism of your bad code, don&amp;rsquo;t shy away from that. Embrace it, learn from it, write it down. Endeavor not to make the same mistake twice. Do not hide your code, seek review and criticism. This is how you will grow. Seek out more senior programmers and read their code. Show gratitude when they take the time to tell you what to fix in yours.&lt;/p&gt;

&lt;h3 id=&#34;make-stuff-constantly:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;Make stuff constantly&lt;/h3&gt;

&lt;p&gt;Some people can read book to learn how to do things. Not me. I can only learn by doing things badly and then researching, reading and iterating over it. Hence, I must constantly be working on side project to learn how to do anything. &lt;strong&gt;Think of something you want to make and then figure out how to do it one small piece at a time.&lt;/strong&gt; &amp;lt;&amp;ndash; This is the secret formula for becoming a software developer.&lt;/p&gt;

&lt;h3 id=&#34;read-read-and-listen:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;Read, read and listen&lt;/h3&gt;

&lt;p&gt;Read &lt;a href=&#34;http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read&#34;&gt;books&lt;/a&gt;, read &lt;a href=&#34;http://blog.codinghorror.com/&#34;&gt;blogs&lt;/a&gt;, read &lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;hacker news&lt;/a&gt;, read &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; read &lt;a href=&#34;https://github.com/joyent/node/blob/master/lib/_http_server.js&#34;&gt;code&lt;/a&gt;, listen to &lt;a href=&#34;https://devchat.tv/js-jabber/&#34;&gt;podcasts&lt;/a&gt;. Perhaps the 300th explanation of a concept will be the one that sinks in.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:ddb22989fc6fc2efe65ece51e45a4a76&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There is so much to do! Why are you fussing about which language to learn? Focus on what you want to create. Become a technologist and a craftsman. Make things! Start right now! You&amp;rsquo;ll learn language syntax as you go, but it will be incidental to learning how to create software holistically and how to make cool things that people will want to use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stop trying to learn a programming language</title>
      <link>http://blog.flowstate.io/post/so_you_wanna_dev/</link>
      <pubDate>Mon, 17 Aug 2015 06:03:19 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/so_you_wanna_dev/</guid>
      <description>

&lt;p&gt;I hear this question all the time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Which programming language should I learn?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My answer is always the same:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;It doesn&#39;t matter. Let the project decide for you.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;a-story:1fed5910f8d953c014c3eb0203feb935&#34;&gt;A story&lt;/h4&gt;

&lt;p&gt;When I first started my journey as a professional software developer, I got hired to work on an application written in a dying language on a platform that would soon be reviled the world over. This project was written in ActionScript 3, using the Flex framework. This was cutting edge stuff at the time, with a bright future, before Steve Jobs and 0 day exploits crapped in the Flash punch bowl.&lt;/p&gt;

&lt;p&gt;The point is, I started learning my trade using a language that I&amp;rsquo;d probably never see again, &lt;strong&gt;but that never mattered&lt;/strong&gt;. What mattered is that I worked with a brilliant team who took time to train me in the craft of programming. I learned the fundamentals of software development and I learned the tools I have used every day since I started that project.&lt;/p&gt;

&lt;p&gt;An aspiring programmer fretting about what language to develop in is like a carpenter worrying about what wood to use. It&amp;rsquo;s one of many choices to be made about a project, but it does not define the carpenter&amp;rsquo;s expertise.&lt;/p&gt;

&lt;p&gt;What matters is not the material you work in, but the tools, the craft, and the mindset you develop.&lt;/p&gt;

&lt;h2 id=&#34;the-tools:1fed5910f8d953c014c3eb0203feb935&#34;&gt;The tools&lt;/h2&gt;

&lt;h3 id=&#34;version-control:1fed5910f8d953c014c3eb0203feb935&#34;&gt;Version control&lt;/h3&gt;

&lt;p&gt;Understand &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&#34;&gt;version control&lt;/a&gt;. &lt;a href=&#34;https://git-scm.com/about&#34;&gt;Git&lt;/a&gt; is the most popular at the moment and seems to have a firm hold on the space. Use &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;. &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell&#34;&gt;Branch&lt;/a&gt;, &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Tagging&#34;&gt;tag&lt;/a&gt;, do &lt;a href=&#34;https://help.github.com/articles/using-pull-requests/&#34;&gt;pull requests&lt;/a&gt;, even if they are just against your own code. You can version control any file. Use git for papers, blog posts, any document that you&amp;rsquo;ll want to have a record of changes to.&lt;/p&gt;

&lt;h3 id=&#34;text-editor:1fed5910f8d953c014c3eb0203feb935&#34;&gt;Text editor&lt;/h3&gt;

&lt;p&gt;Pick something and become a power user. I personally feel most at home in an &lt;a href=&#34;https://en.wikipedia.org/wiki/Integrated_development_environment&#34;&gt;IDE&lt;/a&gt;, so I spend most of my time writing JavaScript in &lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34;&gt;Webstorm&lt;/a&gt;, but I also love the light weight editor &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;. I&amp;rsquo;ve created a ton custom templates that autocomplete common code snippets. I know many keyboard shortcuts and tricks to simplify and expedite my workflow. It&amp;rsquo;s the equivalent of sitting in the driver&amp;rsquo;s seat of a car and adjusting the mirrors and familiarizing yourself with the controls. I try to learn a little something new every day. Some devs recommend working without a mouse one day a week. I haven&amp;rsquo;t had the nerve for that one yet.&lt;/p&gt;

&lt;h3 id=&#34;the-terminal:1fed5910f8d953c014c3eb0203feb935&#34;&gt;The terminal&lt;/h3&gt;

&lt;p&gt;This is among the most important skills you&amp;rsquo;ll need as a developer. This will come up over and over and over. Get comfortable navigating the file system in the terminal (&lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;), running applications, viewing and changing permissions(&lt;code&gt;chmod&lt;/code&gt;), piping data from one app to another (&lt;code&gt;|&lt;/code&gt;). Searching for text strings in a file or directory (&lt;code&gt;grep&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev1.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Eventually, you&amp;rsquo;ll need tools like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;scp&lt;/code&gt; and the whole panoply of command line utilities available on the Unix platform. I&amp;rsquo;m told Windows has stuff like that too.&lt;/p&gt;

&lt;h2 id=&#34;the-platform:1fed5910f8d953c014c3eb0203feb935&#34;&gt;The platform&lt;/h2&gt;

&lt;p&gt;Where is your code going to execute?  How will your users interact with it. For me, right now, that&amp;rsquo;s in the browser and &lt;a href=&#34;https://en.wikipedia.org/wiki/V8_(JavaScript_engine&#34;&gt;Node&amp;rsquo;s V8 engine&lt;/a&gt;). Well, &lt;a href=&#34;http://googleblog.blogspot.com/2009/10/what-is-browser.html&#34;&gt;what is a browser&lt;/a&gt;? &lt;a href=&#34;http://www.slashroot.in/httphypertext-transfer-protocol-request-and-response&#34;&gt;How does HTTP work&lt;/a&gt;? What &lt;a href=&#34;https://developer.chrome.com/devtools&#34;&gt;tools&lt;/a&gt; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Tools&#34;&gt;are&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/safari/tools/&#34;&gt;available&lt;/a&gt; to &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dd565628&#34;&gt;developers&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev2.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;This is your world. These are the rules that will define what you can do and the platform on which you&amp;rsquo;ll be doing it. This is your users whole experience. Before you learn anything about a language, you have to understand the environment in which it will execute.&lt;/p&gt;

&lt;h2 id=&#34;the-craft:1fed5910f8d953c014c3eb0203feb935&#34;&gt;The craft&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://amzn.to/1hozy0j&#34;&gt;Buy this book&lt;/a&gt; and read it more than once.&lt;/p&gt;

&lt;p&gt;Your early code is going to suck. In fact most of your code is going to suck, as will most of the code you will ever read. Nevertheless, you will persevere in the eternal struggle against entropy. You will endeavor to make your code readable and performant and something you are proud to show to others. Embrace simplicity, modularity, decoupling, testing, automation, documentation and all the other &lt;a href=&#34;https://pragprog.com/the-pragmatic-programmer/extracts/tips&#34;&gt;hallmarks of a software craftsman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/so_you_wanna_dev3.png&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-mindset:1fed5910f8d953c014c3eb0203feb935&#34;&gt;The mindset&lt;/h2&gt;

&lt;h3 id=&#34;check-your-ego-at-the-door:1fed5910f8d953c014c3eb0203feb935&#34;&gt;Check your ego at the door.&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re going to hear criticism of your bad code, don&amp;rsquo;t shy away from that. Embrace it, learn from it, write it down. Endeavor not to make the same mistake twice. Do not hide your code, seek review and criticism. This is how you will grow. Seek out more senior programmers and read their code. Show gratitude when they take the time to tell you what to fix in yours.&lt;/p&gt;

&lt;h3 id=&#34;make-stuff-constantly:1fed5910f8d953c014c3eb0203feb935&#34;&gt;Make stuff constantly&lt;/h3&gt;

&lt;p&gt;Some people can read book to learn how to do things. Not me. I can only learn by doing things badly and then researching, reading and iterating over it. Hence, I must constantly be working on side project to learn how to do anything. &lt;strong&gt;Think of something you want to make and then figure out how to do it one small piece at a time.&lt;/strong&gt; &amp;lt;&amp;ndash; This is the secret formula for becoming a software developer.&lt;/p&gt;

&lt;h3 id=&#34;read-read-and-listen:1fed5910f8d953c014c3eb0203feb935&#34;&gt;Read, read and listen&lt;/h3&gt;

&lt;p&gt;Read &lt;a href=&#34;http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read&#34;&gt;books&lt;/a&gt;, read &lt;a href=&#34;http://blog.codinghorror.com/&#34;&gt;blogs&lt;/a&gt;, read &lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;hacker news&lt;/a&gt;, read &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; read &lt;a href=&#34;https://github.com/joyent/node/blob/master/lib/_http_server.js&#34;&gt;code&lt;/a&gt;, listen to &lt;a href=&#34;https://devchat.tv/js-jabber/&#34;&gt;podcasts&lt;/a&gt;. Perhaps the 300th explanation of a concept will be the one that sinks in.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:1fed5910f8d953c014c3eb0203feb935&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There is so much to do! Why are you fussing about which language to learn? Focus on what you want to create. Become a technologist and a craftsman. Make things! Start right now! You&amp;rsquo;ll learn language syntax as you go, but it will be incidental to learning how to create software holistically and how to make cool things that people will want to use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack: Rage to sage</title>
      <link>http://blog.flowstate.io/post/webpack/</link>
      <pubDate>Fri, 14 Aug 2015 20:25:50 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/webpack/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;re like me, your first encounter with Webpack was probably hostile. You&amp;rsquo;re trying to learn some new technology like React, launching a demo project to see how it works and something is broken. You examine the build scripts and suddenly you&amp;rsquo;re confronted with this arcane looking &lt;code&gt;webpack.config.js&lt;/code&gt; file. You cruise over to the documentation for Webpack. It has many pages, none of them marked &lt;em&gt;TL;DR&lt;/em&gt;. You hate reading documentation! This is not even what you were trying to do! You&amp;rsquo;re yak shaving again! Curse you JS tooling cambrian explosion! Gahh!!&lt;/p&gt;

&lt;p&gt;Exhale. Webpack is not that complicated, especially for simple work flows. It&amp;rsquo;s becoming an integral part of the JS ecosystem and so it&amp;rsquo;s worth sitting down and learning it. You can do this, just focus.&lt;/p&gt;

&lt;h3 id=&#34;tl-dr:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;TL;DR&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Webpack is a module bundler like Browserify, but with better support for Node and React.&lt;/li&gt;
&lt;li&gt;Webpack is not that hard.&lt;/li&gt;
&lt;li&gt;Here&amp;rsquo;s a simple example: &lt;a href=&#34;https://github.com/ohall/webpack-example&#34;&gt;https://github.com/ohall/webpack-example&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-is-the-point-of-webpack:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;What is the point of Webpack?&lt;/h3&gt;

&lt;p&gt;Webpack is a module bundler. You may be familiar with &lt;code&gt;Browserify&lt;/code&gt; which allows you to use the AMD (Asynchronous Module Definition) syntax (&lt;code&gt;var foo = require(&#39;bar&#39;);&lt;/code&gt;) in your frontend code, much the same and you would in your Node applications. Basically this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// awesome is exported in another file
var wicked = require(&#39;awesome&#39;);
wicked();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These tools basically suck in all the JS files required by your app and concatenate them into one JS file that you can add to your app. This is WAY better that managing a bunch of script tags in your &lt;code&gt;index.html&lt;/code&gt; or wherever. You can configure &lt;a href=&#34;http://webpack.github.io/docs/loaders.html&#34;&gt;loaders&lt;/a&gt; to do the same thing with other static files, like css and images.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://webpack.github.io/assets/what-is-webpack.png&#34; alt=&#34;webpack&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;but-why-webpack-doesn-t-browserify-do-this-more-simply:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;But why Webpack? Doesn&amp;rsquo;t Browserify do this more simply?&lt;/h3&gt;

&lt;p&gt;There are &lt;a href=&#34;http://mattdesl.svbtle.com/browserify-vs-webpack&#34;&gt;compelling&lt;/a&gt; &lt;a href=&#34;http://blog.namangoel.com/browserify-vs-webpack-js-drama&#34;&gt;arguments&lt;/a&gt; for both &lt;a href=&#34;https://www.reddit.com/r/reactjs/comments/30at04/webpack_vs_browserify_whats_best_for_react/&#34;&gt;technologies&lt;/a&gt;. One big arguement for Webpack is the ability to do &lt;a href=&#34;https://gaearon.github.io/react-hot-loader/&#34;&gt;React Hot-loading&lt;/a&gt; easily, speeding up dev time. But this post isn&amp;rsquo;t about choosing between the two. For whatever reason, you&amp;rsquo;re using Webpack now, DEAL WITH IT.&lt;/p&gt;

&lt;h3 id=&#34;i-m-looking-at-webpack-config-js-and-i-m-angry:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;I&amp;rsquo;m looking at webpack.config.js and I&amp;rsquo;m angry.&lt;/h3&gt;

&lt;p&gt;Whoa. It&amp;rsquo;s cool. Look, let&amp;rsquo;s start with a very simple example, so we can improve the signal to noise ratio. You can find a repo with this example here: &lt;a href=&#34;https://github.com/ohall/webpack-example&#34;&gt;https://github.com/ohall/webpack-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you have an &lt;code&gt;index.js&lt;/code&gt; file;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// index.js
var sweet = require(&#39;./sweet&#39;);
sweet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That requires a sweet module &lt;code&gt;sweet.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// sweet.js
module.exports = function () {
  window.onload = function () {
    var t = document.createTextNode(&#39;You did it! Sweet!&#39;);
    document.body.appendChild(t);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can set up our super simple &lt;code&gt;webpack.config.js&lt;/code&gt; file will export a module with &lt;code&gt;index.js&lt;/code&gt; as our entry file and output a file called &lt;code&gt;bundle.js&lt;/code&gt;. Webpack figures out the rest.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {
    entry: &amp;quot;./index.js&amp;quot;,
    output: {
        path: __dirname,
        filename: &amp;quot;bundle.js&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: &lt;code&gt;__dirname&lt;/code&gt; is a &lt;a href=&#34;https://nodejs.org/docs/latest/api/globals.html#globals_dirname&#34;&gt;reference in Node for the currently executing directory.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve installed Webpack globally,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install webpack -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can run &lt;code&gt;webpack&lt;/code&gt; and create a &lt;code&gt;bundle.js&lt;/code&gt; file that includes all the modules we need and use it in your HTML. &lt;a href=&#34;https://github.com/ohall/webpack-example&#34;&gt;Run the example&lt;/a&gt; to see what the bundle looks like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--index.html--&amp;gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conclusion:0fbf26ffeaefc849c430aca7d9a884cf&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There is SO much more to Webpack, that I&amp;rsquo;ll dive into in the next post. For now though, you have enough to get you a footing in Webpack and start experimenting. JS tooling can be frustrating, especially when it feels like you have to learn a whole new build system every week. Don&amp;rsquo;t despair! Start simple, take time to learn it and try to have fun.&lt;/p&gt;

&lt;p&gt;Next up: &lt;a href=&#34;http://blog.flowstate.io/post/webpack_loaders&#34;&gt;webpack loaders&lt;a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make a shell script into a global command on OSX</title>
      <link>http://blog.flowstate.io/post/osx_global_shell/</link>
      <pubDate>Tue, 02 Jun 2015 09:45:42 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/osx_global_shell/</guid>
      <description>

&lt;h3 id=&#34;this-example-will-open-a-document-passed-in-as-param-in-textmate-obviously-you-can-use-any-app-you-like:3d4f833b57991155259170382335e85b&#34;&gt;This example will open a document passed in as param in TextMate.  Obviously, you can use any app you like.&lt;/h3&gt;

&lt;h4 id=&#34;1-create-your-script-in-usr-local-bin-on-osx-it-will-automatically-be-added-to-your-path:3d4f833b57991155259170382335e85b&#34;&gt;1 Create your script in &lt;code&gt;/usr/local/bin&lt;/code&gt; on OSX, it will automatically be added to your &lt;code&gt;$PATH&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/usr/local/bin/tm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-make-the-script-executable:3d4f833b57991155259170382335e85b&#34;&gt;2 Make the script executable&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chmod +x /usr/local/bin/tm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-create-a-symbolic-link-so-you-can-skip-the-sh-suffix:3d4f833b57991155259170382335e85b&#34;&gt;3 Create a symbolic link, so you can skip the .sh suffix&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ln -s /usr/local/bin/tm.sh /usr/local/bin/tm
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-use-for-increased-excellence:3d4f833b57991155259170382335e85b&#34;&gt;4 Use for increased excellence&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tm coolfile.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s tm.sh&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
if [ -z $1 ];
then
  echo &#39;specify a file to open with TextMate&#39;
  else
  open -a TextMate $1
fi
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Destroying BackboneJS Views</title>
      <link>http://blog.flowstate.io/post/destroy_bb_views/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 UTC</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/destroy_bb_views/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve spent much time using Backbone views, you&amp;rsquo;ve invariable encountered the situation where you want to get rid of a view, but some part of it keeps hanging around. Be it DOM elements or event listeners.  Your new view might be being appended to the old one, or you&amp;rsquo;re seeing duplicated events. What you really need is to destroy that old view once and for all.&lt;/p&gt;

&lt;p&gt;The easiest way to do this is by adding some kind of destroy() function to your view.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how I do it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  Backbone.View.extend({
      //some other view stuff here...
      destroy: function () {
          this.undelegateEvents();
          this.$el.removeData().unbind();
          
          this.remove();
          //OR
          this.$el.empty();
      }
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s break this down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt; we want to make sure we&amp;rsquo;re removing all delegated events (the ones in the &lt;code&gt;events:{&amp;quot;event selector&amp;quot;: &amp;quot;callback&amp;quot;}&lt;/code&gt; hash). We do this so we can avoid memory leaks and not have mystery bindings that will fire unexpectedly later on. &lt;code&gt;undelegateEvents()&lt;/code&gt; is a Backbone.View prototype function that removes the view&amp;rsquo;s delegated events. Simple.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt; we want to cleanup any data in the view object that is hanging around and unbind any events that we bound outside the events hash. jQuery provides a removeData() function that allows us to to do that.&lt;/p&gt;

&lt;p&gt;You may also have bound event listeners to your view chain &lt;code&gt;unbind()&lt;/code&gt; with no arguments to remove all previously-attached event handlers from your $el.
&lt;code&gt;this.$el.removeData().unbind();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you may want to do one of two things here.&lt;/strong&gt; You may want to remove your view element completely OR you just want to remove any child elements you&amp;rsquo;ve appended to it during it&amp;rsquo;s life. The latter would be appropriate if, for example, you&amp;rsquo;ve set the $el of your view to be some DOM element that should remain after your view behavior is complete&lt;/p&gt;

&lt;p&gt;In the former case, &lt;code&gt;this.remove()&lt;/code&gt; will obliterate your view element and it&amp;rsquo;s children from the DOM.&lt;/p&gt;

&lt;p&gt;In the later case, &lt;code&gt;this.$el.empty()&lt;/code&gt; will remove all child elements.&lt;/p&gt;

&lt;p&gt;As you can see, it&amp;rsquo;s not especially difficult to clean up your view, but you do have to do it.  As with many things in the unopinionated world of BackboneJS you have to roll your own solution.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&#34;http://jsfiddle.net/oakley349/caqLx10x/&#34;&gt;this fiddle&lt;/a&gt; if you want to fool around with my solution.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;//jsfiddle.net/oakley349/caqLx10x/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt; 
</description>
    </item>
    
    <item>
      <title>JS map()</title>
      <link>http://blog.flowstate.io/post/js_map/</link>
      <pubDate>Thu, 13 Nov 2014 10:06:47 -0400</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/js_map/</guid>
      <description>

&lt;p&gt;&lt;code&gt;map()&lt;/code&gt; is an array utility function that you&amp;rsquo;re probably either intimately familiar with or, like me, need to learn.&lt;/p&gt;

&lt;p&gt;In a nutshell, &lt;code&gt;map()&lt;/code&gt; creates a new array out of the results of calling a given function on every element on the array on which it&amp;rsquo;s called.&lt;/p&gt;

&lt;p&gt;There are implementations of map() in &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;native JS&lt;/a&gt;, &lt;a href=&#34;http://api.jquery.com/jquery.map/&#34;&gt;jQuery&lt;/a&gt; and &lt;a href=&#34;http://underscorejs.org/#map&#34;&gt;UnderscoreJS&lt;/a&gt;.  All other things being equal, &lt;a href=&#34;http://jsperf.com/map-underscore-vs-jquery/2&#34;&gt;&lt;strong&gt;Underscore&amp;rsquo;s&lt;/strong&gt; version is the most performant&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;map-is-a-collection-function-meaning-it-works-on-either-arrays-or-objects:fb68142dbc73cfc5ed77a3badaa41f25&#34;&gt;map() is a &amp;lsquo;collection function&amp;rsquo;, meaning it works on either Arrays or Objects&lt;/h4&gt;

&lt;p&gt;If our collection is an &lt;strong&gt;Array&lt;/strong&gt;, map() will put each value through a transformational function, passing the value at each index to the array to the callback function as the first parameter, the index as the second and the whole array as the third.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var collection = [1, 2, 3];

_.map(collection, function(val, index, array){ return num * 3; });

// returns array -&amp;gt; [3, 6, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, if our collection is an &lt;strong&gt;Object&lt;/strong&gt;, map() will pass the the value and key if each attribute, as well as the whole object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var collection = {one: 1, two: 2, three: 3};

_.map(collection, function(val, key, object){ return num * 3; });

// returns array -&amp;gt; [3, 6, 9]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Writing your first C&#43;&#43; program on a Mac</title>
      <link>http://blog.flowstate.io/post/first_cpp/</link>
      <pubDate>Sat, 02 Mar 2013 10:17:40 -0400</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/first_cpp/</guid>
      <description>

&lt;p&gt;A friend of mine recently started his first computer science class. His entire class in working on Windows machines and using Visual Studio.  He wants to use his Mac.  I know how frustrating setting up development environment for the first time can be.  He&amp;rsquo;re how I advised him to get started and write is first code.&lt;/p&gt;

&lt;h3 id=&#34;you-need-two-things-to-write-programs-in-c:45ae97b355f298bbd8c3f0f39d92e25a&#34;&gt;You need two things to write programs in C++.&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You need a compiler.  A compiler is an application that takes the code you write in a human readable language ( C++ in this case ) and converts it into machine code so it can run.  If you&amp;rsquo;re a mac user and you want to write any C based code, you&amp;rsquo;ll need to install Xcode. Xcode comes with a C++ complier called g++, which is what you&amp;rsquo;ll end up using one way or another even if you don&amp;rsquo;t use the Xcode editor.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You&amp;rsquo;ll need a text editor.  Basically that means any application that lets you write plain text and save it to your machine.  Xcode, CodeBlocks, Visual Studio and Eclipse are all called IDEs or integrated development environments. The are just big text editors with tons of bells and whistles.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;installing-g:45ae97b355f298bbd8c3f0f39d92e25a&#34;&gt;Installing g++&lt;/h3&gt;

&lt;p&gt;Follow &lt;a href=&#34;http://www.edparrish.net/common/macgpp.php&#34;&gt;these instructions&lt;/a&gt; to make sure you have Xcode and g++ on your Mac.  You can follow Mr. Parrish&amp;rsquo;s instructions for writing your first program, but I think mine are even simpler.&lt;/p&gt;

&lt;h3 id=&#34;writing-your-first-code:45ae97b355f298bbd8c3f0f39d92e25a&#34;&gt;Writing your first code:&lt;/h3&gt;

&lt;h4 id=&#34;start-with-the-simplest-mac-text-editor-textedit-it-should-be-in-your-applications-folder:45ae97b355f298bbd8c3f0f39d92e25a&#34;&gt;Start with the simplest mac text editor TextEdit.  It should be in your Applications folder.&lt;/h4&gt;

&lt;h4 id=&#34;1-type-in-this-code:45ae97b355f298bbd8c3f0f39d92e25a&#34;&gt;1. Type in this code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;

int main()
{ 
  std::cout &amp;lt;&amp;lt; &amp;quot;Hello world!&amp;quot; &amp;lt;&amp;lt; std::endl; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-save-the-file-to-your-desktop-as-a-plain-text-document-with-the-name-helloworld-cpp-the-cpp-extension-lets-the-compiler-know-its-c-code:45ae97b355f298bbd8c3f0f39d92e25a&#34;&gt;2. Save the file to your Desktop as a plain text document with the name helloworld.cpp  the .cpp extension lets the compiler know its C++ code.&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/cpp1.png&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;compiling-and-running-your-program:45ae97b355f298bbd8c3f0f39d92e25a&#34;&gt;Compiling and running your program&lt;/h3&gt;

&lt;p&gt;First, open a terminal window.  You&amp;rsquo;ll find this in Applications/Utilities/Terminal. (yours will be different colors than mine)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/cpp2.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;In the terminal window type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how you navigate from your home directory ( abbreviated &lt;code&gt;~&lt;/code&gt; ) to the directory called &lt;code&gt;Desktop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g++ helloworld.cpp -o hw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will take your C++ code you saved to the desktop and compile it into an application called &lt;code&gt;hw&lt;/code&gt; which is save to the desktop.  You can see it there if you look.&lt;/p&gt;

&lt;p&gt;Now type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./hw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will tell your Mac to run the program.&lt;/p&gt;

&lt;p&gt;If the terminal says: &lt;code&gt;Hello World!&lt;/code&gt;  then &lt;strong&gt;you did it!&lt;/strong&gt;&lt;br /&gt;
You can write any C++ program in this way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/cpp3.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;If you want a nice book on getting started with C (the core of C++) I&amp;rsquo;d recommend &lt;a href=&#34;http://amzn.to/1J7gJ7M&#34;&gt;Head First C&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Programming is fun and satisfying, but you will continually have to break through periods of confusion and frustration.  Stick with it, it&amp;rsquo;s worth the effort.  Good luck!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Podcast Boom Mic</title>
      <link>http://blog.flowstate.io/post/boom_mic/</link>
      <pubDate>Thu, 08 Nov 2012 10:35:48 -0400</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/boom_mic/</guid>
      <description>&lt;p&gt;I record a podcast with some friends.  I realized that the built in mic in my MacBook Pro was not able to capture the high quality audio I was looking for.  I bought the A Blue Snowball Mic which is a nice bang for the buck.  The only drawback is the short stand it comes with, which doesn&amp;rsquo;t let you sit up straight at a desk and get close enough to the mic for the best audio quality.  Solution: Hack a boom out of a desk lamp.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B002OO18NS&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=oakley05f-20&#34;&gt;A Blue Snowball Microphone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/boom_mic1.jpeg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/B001DNFLYS/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B001DNFLYS&amp;amp;linkCode=as2&amp;amp;tag=oakley05f-20&#34;&gt;A cheap desk lamp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/boom_mic2.jpeg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.assoc-amazon.com/e/ir?t=oakley05f-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=B001DNFLYS&#34;&gt;A pop filter&lt;/a&gt; The Blue mic works best if you get right up close.  This will cause your &amp;lsquo;P&amp;rsquo; sounds to make a pop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/boom_mic3.jpeg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Cut the cord out of the (unplugged) lamp.  Removed the bolt which holds the actual lamp assembly to the arm and set it aside, along with the nut if present.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/boom_mic4.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Unscrew he Blue microphone from its tripod base, making sure to leave the 2&amp;rdquo; peg inserted into the bottom of the mic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/boom_mic5.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Place the peg into the triangular space vacated by the lamp assembly.  You can insert some padding around the peg to offer grip. I used a piece of cardboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/boom_mic6.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Replace the bolt/nut and tighten.  It should grip the peg and hold the mic in place.  Adjust and improvise to make it fit snugly&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/boom_mic7.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Plug the USB cable into the back of the mic and secure to the arm.  Make sure to leave a little play for the articulation of the mic and the arm joints.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/boom_mic8.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Secure arm to the table, attach the pop filter and plug the usb cable into your machine.  Now you have a cheap, quick, improvised boom mic that you can fold away and deploy as needed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lower back rehab</title>
      <link>http://blog.flowstate.io/post/lower_back/</link>
      <pubDate>Mon, 08 Oct 2012 10:36:30 EDT</pubDate>
      <author>Oakley Hall</author>
      <guid>http://blog.flowstate.io/post/lower_back/</guid>
      <description>

&lt;p&gt;Earlier this year I started waking up to brutal lower back pain.   I went to a spinal specialist at the behest of my fiancee and learned that I&amp;rsquo;ve been suffering from what he termed a &amp;lsquo;Pars Fracture&amp;rsquo;. I got a prescription for physical therapy and started work that week.  There&amp;rsquo;s not much to do about the actual injury, but my therapist told me that a stronger core would help manage the discomfort.  Long story short, when I do these workouts, the night pain goes away.  They look easy, but they are legit.&lt;/p&gt;

&lt;p&gt;Cartoons are courtesy of my therapist. One thing to focus on is drawing the belly button as much as possible.  It was described to me as pulling it toward the spine.&lt;/p&gt;

&lt;h3 id=&#34;start-with-some-light-cardio-to-warm-up-then-stretch-focusing-on-the-hamstrings-hip-flexors-and-it-bands:2c011abc126a14fa729c2ebaf0b81947&#34;&gt;Start with some light cardio to warm up, then stretch, focusing on the hamstrings, hip flexors and IT bands:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/pt1.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt2.png&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;move-into-these-core-strengthening-moves-being-sure-to-draw-the-belly-button-in:2c011abc126a14fa729c2ebaf0b81947&#34;&gt;Move into these core strengthening moves, being sure to draw the belly button in.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/pt3.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt4.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt5.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt6.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt7.png&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;if-you-have-access-to-a-bosu-ball-and-or-small-medicine-ball-add-these-stability-moves:2c011abc126a14fa729c2ebaf0b81947&#34;&gt;If you have access to a bosu ball and/or small medicine ball, add these stability moves:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.flowstate.io/images/pt8.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt9.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt10.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt11.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt12.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt13.png&#34;/&gt;
&lt;img src=&#34;http://blog.flowstate.io/images/pt14.png&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
